
DIgitalFan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00001a3e  00001ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  0080019a  0080019a  00001b6c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042cf  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001821  00000000  00000000  000063c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026f9  00000000  00000000  00007be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009fc  00000000  00000000  0000a2e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e97  00000000  00000000  0000ace0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000157d  00000000  00000000  0000bb77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0000d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c0       	rjmp	.+216    	; 0x11a <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e3       	ldi	r30, 0x3E	; 62
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 39       	cpi	r26, 0x9A	; 154
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa e9       	ldi	r26, 0x9A	; 154
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 32       	cpi	r26, 0x2C	; 44
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f1 d7       	rcall	.+4066   	; 0x10a6 <main>
      c4:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_18>:
ï»¿#include "apMain.h"

ISR(USART0_RX_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	UART0_ISR_Process();
      f0:	0e 94 2c 09 	call	0x1258	; 0x1258 <UART0_ISR_Process>
}
      f4:	ff 91       	pop	r31
      f6:	ef 91       	pop	r30
      f8:	bf 91       	pop	r27
      fa:	af 91       	pop	r26
      fc:	9f 91       	pop	r25
      fe:	8f 91       	pop	r24
     100:	7f 91       	pop	r23
     102:	6f 91       	pop	r22
     104:	5f 91       	pop	r21
     106:	4f 91       	pop	r20
     108:	3f 91       	pop	r19
     10a:	2f 91       	pop	r18
     10c:	0f 90       	pop	r0
     10e:	0b be       	out	0x3b, r0	; 59
     110:	0f 90       	pop	r0
     112:	0f be       	out	0x3f, r0	; 63
     114:	0f 90       	pop	r0
     116:	1f 90       	pop	r1
     118:	18 95       	reti

0000011a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	11 24       	eor	r1, r1
     124:	0b b6       	in	r0, 0x3b	; 59
     126:	0f 92       	push	r0
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	4f 93       	push	r20
     12e:	5f 93       	push	r21
     130:	6f 93       	push	r22
     132:	7f 93       	push	r23
     134:	8f 93       	push	r24
     136:	9f 93       	push	r25
     138:	af 93       	push	r26
     13a:	bf 93       	push	r27
     13c:	ef 93       	push	r30
     13e:	ff 93       	push	r31
	FND_ISR_Process();
     140:	ea d5       	rcall	.+3028   	; 0xd16 <FND_ISR_Process>
	TCNT0=130;
     142:	82 e8       	ldi	r24, 0x82	; 130
     144:	82 bf       	out	0x32, r24	; 50
}
     146:	ff 91       	pop	r31
     148:	ef 91       	pop	r30
     14a:	bf 91       	pop	r27
     14c:	af 91       	pop	r26
     14e:	9f 91       	pop	r25
     150:	8f 91       	pop	r24
     152:	7f 91       	pop	r23
     154:	6f 91       	pop	r22
     156:	5f 91       	pop	r21
     158:	4f 91       	pop	r20
     15a:	3f 91       	pop	r19
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0b be       	out	0x3b, r0	; 59
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	0b b6       	in	r0, 0x3b	; 59
     178:	0f 92       	push	r0
     17a:	2f 93       	push	r18
     17c:	3f 93       	push	r19
     17e:	4f 93       	push	r20
     180:	5f 93       	push	r21
     182:	6f 93       	push	r22
     184:	7f 93       	push	r23
     186:	8f 93       	push	r24
     188:	9f 93       	push	r25
     18a:	af 93       	push	r26
     18c:	bf 93       	push	r27
     18e:	ef 93       	push	r30
     190:	ff 93       	push	r31
	DigitalFan_Timecalc();
     192:	58 d3       	rcall	.+1712   	; 0x844 <DigitalFan_Timecalc>
	DigitalFan_Autocalc();
     194:	13 d4       	rcall	.+2086   	; 0x9bc <DigitalFan_Autocalc>
     196:	ff 91       	pop	r31
}
     198:	ef 91       	pop	r30
     19a:	bf 91       	pop	r27
     19c:	af 91       	pop	r26
     19e:	9f 91       	pop	r25
     1a0:	8f 91       	pop	r24
     1a2:	7f 91       	pop	r23
     1a4:	6f 91       	pop	r22
     1a6:	5f 91       	pop	r21
     1a8:	4f 91       	pop	r20
     1aa:	3f 91       	pop	r19
     1ac:	2f 91       	pop	r18
     1ae:	0f 90       	pop	r0
     1b0:	0b be       	out	0x3b, r0	; 59
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <apMain_init>:
     1bc:	e6 d2       	rcall	.+1484   	; 0x78a <DigitalFan_init>

void apMain_init(){
	DigitalFan_init();
	Listener_init();
     1be:	12 d0       	rcall	.+36     	; 0x1e4 <Listener_init>
	Presenter_init();
     1c0:	a3 d1       	rcall	.+838    	; 0x508 <Presenter_init>
     1c2:	0e 94 ed 08 	call	0x11da	; 0x11da <TIM0_init>
	TIM0_init();
     1c6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <TIM1_init>
	TIM1_init();
     1ca:	0e 94 03 09 	call	0x1206	; 0x1206 <TIM2_init>
	TIM2_init();
     1ce:	0e 94 0f 09 	call	0x121e	; 0x121e <TIM3_init>
	TIM3_init();
	sei();
     1d2:	78 94       	sei
	Model_setTimerStateData(NONE);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	73 d7       	rcall	.+3814   	; 0x10be <Model_setTimerStateData>
	Model_setFanStateData(OFF);
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	6b c7       	rjmp	.+3798   	; 0x10b2 <Model_setFanStateData>
     1dc:	08 95       	ret

000001de <apMain_execute>:
     1de:	90 d1       	rcall	.+800    	; 0x500 <Listener_eventCheck>
}

void apMain_execute(){
	Listener_eventCheck();
	DigitalFan_execute();
     1e0:	c9 c3       	rjmp	.+1938   	; 0x974 <DigitalFan_execute>
     1e2:	08 95       	ret

000001e4 <Listener_init>:
     1e4:	36 d4       	rcall	.+2156   	; 0xa52 <Buzzer_init>

button_t btnAuto, btnOff, btnMode, btnTimer;

void Listener_init(){
	Buzzer_init();
	UART0_init();
     1e6:	0e 94 20 09 	call	0x1240	; 0x1240 <UART0_init>
	Button_init(&btnAuto, &DDRA, &PINA, 0);
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	49 e3       	ldi	r20, 0x39	; 57
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	6a e3       	ldi	r22, 0x3A	; 58
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	89 ea       	ldi	r24, 0xA9	; 169
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	f6 d3       	rcall	.+2028   	; 0x9e6 <Button_init>
	Button_init(&btnOff, &DDRA, &PINA, 1);
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	49 e3       	ldi	r20, 0x39	; 57
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	6a e3       	ldi	r22, 0x3A	; 58
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	85 eb       	ldi	r24, 0xB5	; 181
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	ee d3       	rcall	.+2012   	; 0x9e6 <Button_init>
	Button_init(&btnMode, &DDRA, &PINA, 2);
     20a:	22 e0       	ldi	r18, 0x02	; 2
     20c:	49 e3       	ldi	r20, 0x39	; 57
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	6a e3       	ldi	r22, 0x3A	; 58
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	8b eb       	ldi	r24, 0xBB	; 187
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	e6 d3       	rcall	.+1996   	; 0x9e6 <Button_init>
	Button_init(&btnTimer, &DDRA, &PINA, 3);
     21a:	23 e0       	ldi	r18, 0x03	; 3
     21c:	49 e3       	ldi	r20, 0x39	; 57
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	6a e3       	ldi	r22, 0x3A	; 58
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	8f ea       	ldi	r24, 0xAF	; 175
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	de c3       	rjmp	.+1980   	; 0x9e6 <Button_init>
     22a:	08 95       	ret

0000022c <Listener_TimerEvent>:
	Listener_FanUARTEvent();
}

void Listener_TimerEvent(){
	uint8_t TimerState;
	TimerState = Model_getTimerStateData();
     22c:	45 d7       	rcall	.+3722   	; 0x10b8 <Model_getTimerStateData>
	switch(TimerState){
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	81 f0       	breq	.+32     	; 0x252 <Listener_TimerEvent+0x26>
     232:	28 f0       	brcs	.+10     	; 0x23e <Listener_TimerEvent+0x12>
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	c1 f0       	breq	.+48     	; 0x268 <Listener_TimerEvent+0x3c>
     238:	83 30       	cpi	r24, 0x03	; 3
     23a:	09 f1       	breq	.+66     	; 0x27e <Listener_TimerEvent+0x52>
     23c:	08 95       	ret
		case NONE:
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     23e:	8f ea       	ldi	r24, 0xAF	; 175
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	de d3       	rcall	.+1980   	; 0xa00 <Button_GetState>
     244:	81 30       	cpi	r24, 0x01	; 1
			TimerState = THREE;
			Model_setTimerStateData(TimerState);
     246:	29 f5       	brne	.+74     	; 0x292 <Listener_TimerEvent+0x66>
     248:	3a d7       	rcall	.+3700   	; 0x10be <Model_setTimerStateData>
			Buzzer_buttonOn(200);
     24a:	88 ec       	ldi	r24, 0xC8	; 200
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	2f c4       	rjmp	.+2142   	; 0xaae <Buzzer_buttonOn>
     250:	08 95       	ret
		}
		break;
		case THREE:
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     252:	8f ea       	ldi	r24, 0xAF	; 175
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	d4 d3       	rcall	.+1960   	; 0xa00 <Button_GetState>
     258:	81 30       	cpi	r24, 0x01	; 1
			TimerState = FIVE;
			Model_setTimerStateData(TimerState);
     25a:	d9 f4       	brne	.+54     	; 0x292 <Listener_TimerEvent+0x66>
     25c:	82 e0       	ldi	r24, 0x02	; 2
			Buzzer_buttonOn(400);
     25e:	2f d7       	rcall	.+3678   	; 0x10be <Model_setTimerStateData>
     260:	80 e9       	ldi	r24, 0x90	; 144
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	24 c4       	rjmp	.+2120   	; 0xaae <Buzzer_buttonOn>
		}
		break;
		case FIVE:
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     266:	08 95       	ret
     268:	8f ea       	ldi	r24, 0xAF	; 175
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	c9 d3       	rcall	.+1938   	; 0xa00 <Button_GetState>
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	81 f4       	brne	.+32     	; 0x292 <Listener_TimerEvent+0x66>
			TimerState = SEVEN;
			Model_setTimerStateData(TimerState);
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	24 d7       	rcall	.+3656   	; 0x10be <Model_setTimerStateData>
			Buzzer_buttonOn(600);
     276:	88 e5       	ldi	r24, 0x58	; 88
     278:	92 e0       	ldi	r25, 0x02	; 2
     27a:	19 c4       	rjmp	.+2098   	; 0xaae <Buzzer_buttonOn>
		}
		break;
		case SEVEN:
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     27c:	08 95       	ret
     27e:	8f ea       	ldi	r24, 0xAF	; 175
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	be d3       	rcall	.+1916   	; 0xa00 <Button_GetState>
     284:	81 30       	cpi	r24, 0x01	; 1
			TimerState = NONE;
			Model_setTimerStateData(TimerState);
     286:	29 f4       	brne	.+10     	; 0x292 <Listener_TimerEvent+0x66>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	19 d7       	rcall	.+3634   	; 0x10be <Model_setTimerStateData>
			Buzzer_buttonOn(100);
     28c:	84 e6       	ldi	r24, 0x64	; 100
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e c4       	rjmp	.+2076   	; 0xaae <Buzzer_buttonOn>
     292:	08 95       	ret

00000294 <Listener_FanEvent>:
     294:	0b d7       	rcall	.+3606   	; 0x10ac <Model_getFanStateData>
}

void Listener_FanEvent(){
	uint8_t FanState;
	FanState = Model_getFanStateData();
	switch(FanState){
     296:	82 30       	cpi	r24, 0x02	; 2
     298:	09 f4       	brne	.+2      	; 0x29c <Listener_FanEvent+0x8>
     29a:	51 c0       	rjmp	.+162    	; 0x33e <Listener_FanEvent+0xaa>
     29c:	30 f4       	brcc	.+12     	; 0x2aa <Listener_FanEvent+0x16>
     29e:	88 23       	and	r24, r24
     2a0:	51 f0       	breq	.+20     	; 0x2b6 <Listener_FanEvent+0x22>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <Listener_FanEvent+0x14>
     2a6:	6c c0       	rjmp	.+216    	; 0x380 <Listener_FanEvent+0xec>
     2a8:	08 95       	ret
     2aa:	85 30       	cpi	r24, 0x05	; 5
     2ac:	31 f1       	breq	.+76     	; 0x2fa <Listener_FanEvent+0x66>
     2ae:	86 30       	cpi	r24, 0x06	; 6
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <Listener_FanEvent+0x20>
     2b2:	86 c0       	rjmp	.+268    	; 0x3c0 <Listener_FanEvent+0x12c>
     2b4:	08 95       	ret
		case OFF:
		if((Button_GetState(&btnOff) == ACT_RELEASED)){
     2b6:	85 eb       	ldi	r24, 0xB5	; 181
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	a2 d3       	rcall	.+1860   	; 0xa00 <Button_GetState>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	31 f4       	brne	.+12     	; 0x2cc <Listener_FanEvent+0x38>
			FanState = LOW;
			Model_setFanStateData(FanState);
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	f7 d6       	rcall	.+3566   	; 0x10b2 <Model_setFanStateData>
     2c4:	8c e2       	ldi	r24, 0x2C	; 44
			Buzzer_buttonOn(300);
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	f2 c3       	rjmp	.+2020   	; 0xaae <Buzzer_buttonOn>
     2ca:	08 95       	ret
     2cc:	8b eb       	ldi	r24, 0xBB	; 187
		}
		else if((Button_GetState(&btnMode) == ACT_RELEASED)){
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	97 d3       	rcall	.+1838   	; 0xa00 <Button_GetState>
     2d2:	81 30       	cpi	r24, 0x01	; 1
     2d4:	31 f4       	brne	.+12     	; 0x2e2 <Listener_FanEvent+0x4e>
			FanState = LOW;
			Model_setFanStateData(FanState);
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	ec d6       	rcall	.+3544   	; 0x10b2 <Model_setFanStateData>
			Buzzer_buttonOn(300);
     2da:	8c e2       	ldi	r24, 0x2C	; 44
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	e7 c3       	rjmp	.+1998   	; 0xaae <Buzzer_buttonOn>
     2e0:	08 95       	ret
		}
		else if((Button_GetState(&btnAuto) == ACT_RELEASED)){
     2e2:	89 ea       	ldi	r24, 0xA9	; 169
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	8c d3       	rcall	.+1816   	; 0xa00 <Button_GetState>
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	09 f0       	breq	.+2      	; 0x2ee <Listener_FanEvent+0x5a>
			FanState = AUTO;
			Model_setFanStateData(FanState);
     2ec:	89 c0       	rjmp	.+274    	; 0x400 <__LOCK_REGION_LENGTH__>
     2ee:	86 e0       	ldi	r24, 0x06	; 6
			Buzzer_buttonOn(1000);
     2f0:	e0 d6       	rcall	.+3520   	; 0x10b2 <Model_setFanStateData>
     2f2:	88 ee       	ldi	r24, 0xE8	; 232
     2f4:	93 e0       	ldi	r25, 0x03	; 3
     2f6:	db c3       	rjmp	.+1974   	; 0xaae <Buzzer_buttonOn>
		}
		break;
		case LOW:
		if((Button_GetState(&btnMode) == ACT_RELEASED)){
     2f8:	08 95       	ret
     2fa:	8b eb       	ldi	r24, 0xBB	; 187
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	80 d3       	rcall	.+1792   	; 0xa00 <Button_GetState>
     300:	81 30       	cpi	r24, 0x01	; 1
			FanState = MIDDLE;
			Model_setFanStateData(FanState);
     302:	31 f4       	brne	.+12     	; 0x310 <Listener_FanEvent+0x7c>
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	d5 d6       	rcall	.+3498   	; 0x10b2 <Model_setFanStateData>
			Buzzer_buttonOn(500);
     308:	84 ef       	ldi	r24, 0xF4	; 244
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	d0 c3       	rjmp	.+1952   	; 0xaae <Buzzer_buttonOn>
		}
		else if((Button_GetState(&btnAuto) == ACT_RELEASED)){
     30e:	08 95       	ret
     310:	89 ea       	ldi	r24, 0xA9	; 169
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	75 d3       	rcall	.+1770   	; 0xa00 <Button_GetState>
     316:	81 30       	cpi	r24, 0x01	; 1
			FanState = AUTO;
			Model_setFanStateData(FanState);
     318:	31 f4       	brne	.+12     	; 0x326 <Listener_FanEvent+0x92>
     31a:	86 e0       	ldi	r24, 0x06	; 6
			Buzzer_buttonOn(1000);
     31c:	ca d6       	rcall	.+3476   	; 0x10b2 <Model_setFanStateData>
     31e:	88 ee       	ldi	r24, 0xE8	; 232
     320:	93 e0       	ldi	r25, 0x03	; 3
     322:	c5 c3       	rjmp	.+1930   	; 0xaae <Buzzer_buttonOn>
		}
		else if((Button_GetState(&btnOff) == ACT_RELEASED)){
     324:	08 95       	ret
     326:	85 eb       	ldi	r24, 0xB5	; 181
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	6a d3       	rcall	.+1748   	; 0xa00 <Button_GetState>
     32c:	81 30       	cpi	r24, 0x01	; 1
			FanState = OFF;
			Model_setFanStateData(FanState);
     32e:	09 f0       	breq	.+2      	; 0x332 <Listener_FanEvent+0x9e>
     330:	67 c0       	rjmp	.+206    	; 0x400 <__LOCK_REGION_LENGTH__>
     332:	80 e0       	ldi	r24, 0x00	; 0
			Buzzer_buttonOn(100);
     334:	be d6       	rcall	.+3452   	; 0x10b2 <Model_setFanStateData>
     336:	84 e6       	ldi	r24, 0x64	; 100
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	b9 c3       	rjmp	.+1906   	; 0xaae <Buzzer_buttonOn>
		}
		break;
		case MIDDLE:
		if((Button_GetState(&btnMode) == ACT_RELEASED)){
     33c:	08 95       	ret
     33e:	8b eb       	ldi	r24, 0xBB	; 187
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	5e d3       	rcall	.+1724   	; 0xa00 <Button_GetState>
     344:	81 30       	cpi	r24, 0x01	; 1
			FanState = HIGH;
			Model_setFanStateData(FanState);
     346:	29 f4       	brne	.+10     	; 0x352 <Listener_FanEvent+0xbe>
			Buzzer_buttonOn(800);
     348:	b4 d6       	rcall	.+3432   	; 0x10b2 <Model_setFanStateData>
     34a:	80 e2       	ldi	r24, 0x20	; 32
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	af c3       	rjmp	.+1886   	; 0xaae <Buzzer_buttonOn>
		}
		else if((Button_GetState(&btnAuto) == ACT_RELEASED)){
     350:	08 95       	ret
     352:	89 ea       	ldi	r24, 0xA9	; 169
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	54 d3       	rcall	.+1704   	; 0xa00 <Button_GetState>
     358:	81 30       	cpi	r24, 0x01	; 1
			FanState = AUTO;
			Model_setFanStateData(FanState);
     35a:	31 f4       	brne	.+12     	; 0x368 <Listener_FanEvent+0xd4>
     35c:	86 e0       	ldi	r24, 0x06	; 6
     35e:	a9 d6       	rcall	.+3410   	; 0x10b2 <Model_setFanStateData>
			Buzzer_buttonOn(1000);
     360:	88 ee       	ldi	r24, 0xE8	; 232
     362:	93 e0       	ldi	r25, 0x03	; 3
     364:	a4 c3       	rjmp	.+1864   	; 0xaae <Buzzer_buttonOn>
		}
		else if((Button_GetState(&btnOff) == ACT_RELEASED)){
     366:	08 95       	ret
     368:	85 eb       	ldi	r24, 0xB5	; 181
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	49 d3       	rcall	.+1682   	; 0xa00 <Button_GetState>
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	09 f0       	breq	.+2      	; 0x374 <Listener_FanEvent+0xe0>
			FanState = OFF;
			Model_setFanStateData(FanState);
     372:	46 c0       	rjmp	.+140    	; 0x400 <__LOCK_REGION_LENGTH__>
     374:	80 e0       	ldi	r24, 0x00	; 0
			Buzzer_buttonOn(100);
     376:	9d d6       	rcall	.+3386   	; 0x10b2 <Model_setFanStateData>
     378:	84 e6       	ldi	r24, 0x64	; 100
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	98 c3       	rjmp	.+1840   	; 0xaae <Buzzer_buttonOn>
		}
		break;
		case HIGH:
		if((Button_GetState(&btnMode) == ACT_RELEASED)){
     37e:	08 95       	ret
     380:	8b eb       	ldi	r24, 0xBB	; 187
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	3d d3       	rcall	.+1658   	; 0xa00 <Button_GetState>
     386:	81 30       	cpi	r24, 0x01	; 1
			FanState = LOW;
			Model_setFanStateData(FanState);
     388:	31 f4       	brne	.+12     	; 0x396 <Listener_FanEvent+0x102>
     38a:	85 e0       	ldi	r24, 0x05	; 5
			Buzzer_buttonOn(300);
     38c:	92 d6       	rcall	.+3364   	; 0x10b2 <Model_setFanStateData>
     38e:	8c e2       	ldi	r24, 0x2C	; 44
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	8d d3       	rcall	.+1818   	; 0xaae <Buzzer_buttonOn>
		}
		else if((Button_GetState(&btnAuto) == ACT_RELEASED)){
     394:	15 c0       	rjmp	.+42     	; 0x3c0 <Listener_FanEvent+0x12c>
     396:	89 ea       	ldi	r24, 0xA9	; 169
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	32 d3       	rcall	.+1636   	; 0xa00 <Button_GetState>
     39c:	81 30       	cpi	r24, 0x01	; 1
			FanState = AUTO;
			Model_setFanStateData(FanState);
     39e:	31 f4       	brne	.+12     	; 0x3ac <Listener_FanEvent+0x118>
     3a0:	86 e0       	ldi	r24, 0x06	; 6
     3a2:	87 d6       	rcall	.+3342   	; 0x10b2 <Model_setFanStateData>
			Buzzer_buttonOn(1000);
     3a4:	88 ee       	ldi	r24, 0xE8	; 232
     3a6:	93 e0       	ldi	r25, 0x03	; 3
     3a8:	82 d3       	rcall	.+1796   	; 0xaae <Buzzer_buttonOn>
		}
		else if((Button_GetState(&btnOff) == ACT_RELEASED)){
     3aa:	0a c0       	rjmp	.+20     	; 0x3c0 <Listener_FanEvent+0x12c>
     3ac:	85 eb       	ldi	r24, 0xB5	; 181
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	27 d3       	rcall	.+1614   	; 0xa00 <Button_GetState>
     3b2:	81 30       	cpi	r24, 0x01	; 1
			FanState = OFF;
			Model_setFanStateData(FanState);
     3b4:	29 f4       	brne	.+10     	; 0x3c0 <Listener_FanEvent+0x12c>
     3b6:	80 e0       	ldi	r24, 0x00	; 0
			Buzzer_buttonOn(100);
     3b8:	7c d6       	rcall	.+3320   	; 0x10b2 <Model_setFanStateData>
     3ba:	84 e6       	ldi	r24, 0x64	; 100
     3bc:	90 e0       	ldi	r25, 0x00	; 0
		}
		case AUTO:
		if((Button_GetState(&btnMode) == ACT_RELEASED)){
     3be:	77 d3       	rcall	.+1774   	; 0xaae <Buzzer_buttonOn>
     3c0:	8b eb       	ldi	r24, 0xBB	; 187
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	1d d3       	rcall	.+1594   	; 0xa00 <Button_GetState>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	31 f4       	brne	.+12     	; 0x3d6 <Listener_FanEvent+0x142>
			FanState = LOW;
			Model_setFanStateData(FanState);
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	72 d6       	rcall	.+3300   	; 0x10b2 <Model_setFanStateData>
     3ce:	8c e2       	ldi	r24, 0x2C	; 44
			Buzzer_buttonOn(300);
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	6d c3       	rjmp	.+1754   	; 0xaae <Buzzer_buttonOn>
     3d4:	08 95       	ret
     3d6:	85 eb       	ldi	r24, 0xB5	; 181
     3d8:	91 e0       	ldi	r25, 0x01	; 1
		}
		else if((Button_GetState(&btnOff) == ACT_RELEASED)){
     3da:	12 d3       	rcall	.+1572   	; 0xa00 <Button_GetState>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	31 f4       	brne	.+12     	; 0x3ec <Listener_FanEvent+0x158>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	67 d6       	rcall	.+3278   	; 0x10b2 <Model_setFanStateData>
     3e4:	84 e6       	ldi	r24, 0x64	; 100
			FanState = OFF;
			Model_setFanStateData(FanState);
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	62 c3       	rjmp	.+1732   	; 0xaae <Buzzer_buttonOn>
     3ea:	08 95       	ret
			Buzzer_buttonOn(100);
     3ec:	8b eb       	ldi	r24, 0xBB	; 187
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	07 d3       	rcall	.+1550   	; 0xa00 <Button_GetState>
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	29 f4       	brne	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
		}
		else if((Button_GetState(&btnMode) == ACT_RELEASED)){
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	5c d6       	rcall	.+3256   	; 0x10b2 <Model_setFanStateData>
     3fa:	8c e2       	ldi	r24, 0x2C	; 44
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	57 c3       	rjmp	.+1710   	; 0xaae <Buzzer_buttonOn>
     400:	08 95       	ret

00000402 <Listener_FanUARTEvent>:
			FanState = LOW;
			Model_setFanStateData(FanState);
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	4b d7       	rcall	.+3734   	; 0x129e <UART0_getRxFlag>
			Buzzer_buttonOn(300);
     408:	88 23       	and	r24, r24
     40a:	09 f4       	brne	.+2      	; 0x40e <Listener_FanUARTEvent+0xc>
     40c:	76 c0       	rjmp	.+236    	; 0x4fa <Listener_FanUARTEvent+0xf8>
     40e:	44 d7       	rcall	.+3720   	; 0x1298 <UART0_clearRxFlag>
     410:	49 d7       	rcall	.+3730   	; 0x12a4 <UART0_readRxBuff>
{
	uint8_t* rxString;
	if(UART0_getRxFlag())
	{
		UART0_clearRxFlag();
		rxString = UART0_readRxBuff();
     412:	ec 01       	movw	r28, r24
     414:	6b e1       	ldi	r22, 0x1B	; 27
		
		if(!strcmp((char *)rxString,"OFF\n"))
     416:	71 e0       	ldi	r23, 0x01	; 1
     418:	0e 94 29 0a 	call	0x1452	; 0x1452 <strcmp>
     41c:	89 2b       	or	r24, r25
     41e:	31 f4       	brne	.+12     	; 0x42c <Listener_FanUARTEvent+0x2a>
     420:	84 e6       	ldi	r24, 0x64	; 100
		{
			Buzzer_buttonOn(100);
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	44 d3       	rcall	.+1672   	; 0xaae <Buzzer_buttonOn>
     426:	80 e0       	ldi	r24, 0x00	; 0
			Model_setFanStateData(OFF);
     428:	44 d6       	rcall	.+3208   	; 0x10b2 <Model_setFanStateData>
     42a:	67 c0       	rjmp	.+206    	; 0x4fa <Listener_FanUARTEvent+0xf8>
     42c:	60 e2       	ldi	r22, 0x20	; 32
			
		}
		else if(!strcmp((char *)rxString,"LOW\n"))
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	ce 01       	movw	r24, r28
     432:	0e 94 29 0a 	call	0x1452	; 0x1452 <strcmp>
     436:	89 2b       	or	r24, r25
     438:	31 f4       	brne	.+12     	; 0x446 <Listener_FanUARTEvent+0x44>
     43a:	8c e2       	ldi	r24, 0x2C	; 44
		{
			Buzzer_buttonOn(300);
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	37 d3       	rcall	.+1646   	; 0xaae <Buzzer_buttonOn>
			Model_setFanStateData(LOW);
     440:	85 e0       	ldi	r24, 0x05	; 5
     442:	37 d6       	rcall	.+3182   	; 0x10b2 <Model_setFanStateData>
     444:	5a c0       	rjmp	.+180    	; 0x4fa <Listener_FanUARTEvent+0xf8>
     446:	65 e2       	ldi	r22, 0x25	; 37
		}
		else if(!strcmp((char *)rxString,"MIDDLE\n"))
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	ce 01       	movw	r24, r28
     44c:	0e 94 29 0a 	call	0x1452	; 0x1452 <strcmp>
     450:	89 2b       	or	r24, r25
     452:	31 f4       	brne	.+12     	; 0x460 <Listener_FanUARTEvent+0x5e>
		{
			Buzzer_buttonOn(500);
     454:	84 ef       	ldi	r24, 0xF4	; 244
     456:	91 e0       	ldi	r25, 0x01	; 1
			Model_setFanStateData(MIDDLE);
     458:	2a d3       	rcall	.+1620   	; 0xaae <Buzzer_buttonOn>
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	2a d6       	rcall	.+3156   	; 0x10b2 <Model_setFanStateData>
     45e:	4d c0       	rjmp	.+154    	; 0x4fa <Listener_FanUARTEvent+0xf8>
		}
		else if(!strcmp((char *)rxString,"HIGH\n"))
     460:	6d e2       	ldi	r22, 0x2D	; 45
     462:	71 e0       	ldi	r23, 0x01	; 1
     464:	ce 01       	movw	r24, r28
     466:	f5 d7       	rcall	.+4074   	; 0x1452 <strcmp>
     468:	89 2b       	or	r24, r25
		{
			Buzzer_buttonOn(800);
     46a:	31 f4       	brne	.+12     	; 0x478 <Listener_FanUARTEvent+0x76>
     46c:	80 e2       	ldi	r24, 0x20	; 32
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	1e d3       	rcall	.+1596   	; 0xaae <Buzzer_buttonOn>
			Model_setFanStateData(HIGH);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	1e d6       	rcall	.+3132   	; 0x10b2 <Model_setFanStateData>
     476:	41 c0       	rjmp	.+130    	; 0x4fa <Listener_FanUARTEvent+0xf8>
     478:	63 e3       	ldi	r22, 0x33	; 51
		}
		else if(!strcmp((char *)rxString,"AUTO\n"))
     47a:	71 e0       	ldi	r23, 0x01	; 1
     47c:	ce 01       	movw	r24, r28
     47e:	e9 d7       	rcall	.+4050   	; 0x1452 <strcmp>
     480:	89 2b       	or	r24, r25
		{
			Buzzer_buttonOn(1000);
     482:	31 f4       	brne	.+12     	; 0x490 <Listener_FanUARTEvent+0x8e>
     484:	88 ee       	ldi	r24, 0xE8	; 232
     486:	93 e0       	ldi	r25, 0x03	; 3
     488:	12 d3       	rcall	.+1572   	; 0xaae <Buzzer_buttonOn>
			Model_setFanStateData(AUTO);
     48a:	86 e0       	ldi	r24, 0x06	; 6
     48c:	12 d6       	rcall	.+3108   	; 0x10b2 <Model_setFanStateData>
     48e:	35 c0       	rjmp	.+106    	; 0x4fa <Listener_FanUARTEvent+0xf8>
		}
		else if(!strcmp((char *)rxString,"NONE\n"))
     490:	69 e3       	ldi	r22, 0x39	; 57
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	ce 01       	movw	r24, r28
     496:	dd d7       	rcall	.+4026   	; 0x1452 <strcmp>
     498:	89 2b       	or	r24, r25
		{
			Buzzer_buttonOn(100);
     49a:	31 f4       	brne	.+12     	; 0x4a8 <Listener_FanUARTEvent+0xa6>
     49c:	84 e6       	ldi	r24, 0x64	; 100
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	06 d3       	rcall	.+1548   	; 0xaae <Buzzer_buttonOn>
			Model_setTimerStateData(NONE);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0c d6       	rcall	.+3096   	; 0x10be <Model_setTimerStateData>
     4a6:	29 c0       	rjmp	.+82     	; 0x4fa <Listener_FanUARTEvent+0xf8>
		}
		else if(!strcmp((char *)rxString,"TIME_3min\n"))
     4a8:	6f e3       	ldi	r22, 0x3F	; 63
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	d1 d7       	rcall	.+4002   	; 0x1452 <strcmp>
     4b0:	89 2b       	or	r24, r25
     4b2:	41 f4       	brne	.+16     	; 0x4c4 <Listener_FanUARTEvent+0xc2>
		{
			Buzzer_buttonOn(200);
     4b4:	88 ec       	ldi	r24, 0xC8	; 200
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	fa d2       	rcall	.+1524   	; 0xaae <Buzzer_buttonOn>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
			Model_setTimerStateData(THREE);
     4bc:	00 d6       	rcall	.+3072   	; 0x10be <Model_setTimerStateData>
     4be:	ce 01       	movw	r24, r28
			Model_setTimerUartStateData(rxString);
     4c0:	06 d6       	rcall	.+3084   	; 0x10ce <Model_setTimerUartStateData>
     4c2:	1b c0       	rjmp	.+54     	; 0x4fa <Listener_FanUARTEvent+0xf8>
		}
		else if(!strcmp((char *)rxString,"TIME_5min\n"))
     4c4:	6a e4       	ldi	r22, 0x4A	; 74
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	ce 01       	movw	r24, r28
     4ca:	c3 d7       	rcall	.+3974   	; 0x1452 <strcmp>
     4cc:	89 2b       	or	r24, r25
     4ce:	41 f4       	brne	.+16     	; 0x4e0 <Listener_FanUARTEvent+0xde>
     4d0:	80 e9       	ldi	r24, 0x90	; 144
		{
			Buzzer_buttonOn(400);
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	ec d2       	rcall	.+1496   	; 0xaae <Buzzer_buttonOn>
     4d6:	82 e0       	ldi	r24, 0x02	; 2
			Model_setTimerStateData(FIVE);
     4d8:	f2 d5       	rcall	.+3044   	; 0x10be <Model_setTimerStateData>
     4da:	ce 01       	movw	r24, r28
			Model_setTimerUartStateData(rxString);
     4dc:	f8 d5       	rcall	.+3056   	; 0x10ce <Model_setTimerUartStateData>
     4de:	0d c0       	rjmp	.+26     	; 0x4fa <Listener_FanUARTEvent+0xf8>
     4e0:	65 e5       	ldi	r22, 0x55	; 85
     4e2:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if(!strcmp((char *)rxString,"TIME_7min\n"))
     4e4:	ce 01       	movw	r24, r28
     4e6:	b5 d7       	rcall	.+3946   	; 0x1452 <strcmp>
     4e8:	89 2b       	or	r24, r25
     4ea:	39 f4       	brne	.+14     	; 0x4fa <Listener_FanUARTEvent+0xf8>
     4ec:	88 e5       	ldi	r24, 0x58	; 88
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	de d2       	rcall	.+1468   	; 0xaae <Buzzer_buttonOn>
		{
			Buzzer_buttonOn(600);
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	e4 d5       	rcall	.+3016   	; 0x10be <Model_setTimerStateData>
     4f6:	ce 01       	movw	r24, r28
     4f8:	ea d5       	rcall	.+3028   	; 0x10ce <Model_setTimerUartStateData>
			Model_setTimerStateData(SEVEN);
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <Listener_eventCheck>:
			Model_setTimerUartStateData(rxString);
     500:	95 de       	rcall	.-726    	; 0x22c <Listener_TimerEvent>
     502:	c8 de       	rcall	.-624    	; 0x294 <Listener_FanEvent>
     504:	7e cf       	rjmp	.-260    	; 0x402 <Listener_FanUARTEvent>
		}
	}
     506:	08 95       	ret

00000508 <Presenter_init>:
char *state[5] = {"OFF", "LOW", "MID", "HIGH", "AUTO"};

extern uint8_t fanRandom;

void Presenter_init(){
	FND_init();
     508:	04 d3       	rcall	.+1544   	; 0xb12 <FND_init>
	LCD_init();
     50a:	77 d5       	rcall	.+2798   	; 0xffa <LCD_init>
	LCD_I2C_init();
     50c:	71 d4       	rcall	.+2274   	; 0xdf0 <LCD_I2C_init>
     50e:	e2 c2       	rjmp	.+1476   	; 0xad4 <Fan_init>
	Fan_init();
     510:	08 95       	ret

00000512 <Presenter_FanData>:
     512:	cc d5       	rcall	.+2968   	; 0x10ac <Model_getFanStateData>
     514:	86 30       	cpi	r24, 0x06	; 6


void Presenter_FanData(){
	uint8_t fanState;
	fanState = Model_getFanStateData();
	switch(fanState){
     516:	29 f4       	brne	.+10     	; 0x522 <Presenter_FanData+0x10>
		case AUTO:
		Fan_speedMode(fanRandom);
     518:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <fanRandom>
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	e0 c2       	rjmp	.+1472   	; 0xae0 <Fan_speedMode>
		break;
		default:
		Fan_speedMode(fanState);
     520:	08 95       	ret
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	dd c2       	rjmp	.+1466   	; 0xae0 <Fan_speedMode>
     526:	08 95       	ret

00000528 <LCD_Gauge>:
		break;
	}
}

void LCD_Gauge()
{
     528:	cf 93       	push	r28
	uint8_t fanState;
	fanState = Model_getFanStateData();
     52a:	c0 d5       	rcall	.+2944   	; 0x10ac <Model_getFanStateData>
     52c:	c8 2f       	mov	r28, r24
	static uint8_t laststate;
	if(fanRandom != laststate)
     52e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <fanRandom>
     532:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
     536:	98 17       	cp	r25, r24
	{
		LCD_I2C_clearDisplay();
     538:	29 f0       	breq	.+10     	; 0x544 <LCD_Gauge+0x1c>
     53a:	97 d4       	rcall	.+2350   	; 0xe6a <LCD_I2C_clearDisplay>
		laststate = fanRandom;
     53c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <fanRandom>
     540:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
	}
	if(fanState == OFF || (fanState == AUTO && fanRandom == OFF))
     544:	cc 23       	and	r28, r28
     546:	31 f0       	breq	.+12     	; 0x554 <LCD_Gauge+0x2c>
     548:	c6 30       	cpi	r28, 0x06	; 6
     54a:	31 f4       	brne	.+12     	; 0x558 <LCD_Gauge+0x30>
     54c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <fanRandom>
     550:	81 11       	cpse	r24, r1
	{
		LCD_I2C_clearDisplay();
     552:	02 c0       	rjmp	.+4      	; 0x558 <LCD_Gauge+0x30>
     554:	8a d4       	rcall	.+2324   	; 0xe6a <LCD_I2C_clearDisplay>
     556:	1d c0       	rjmp	.+58     	; 0x592 <LCD_Gauge+0x6a>
	}
	else if(fanState == LOW || (fanState == AUTO && fanRandom == LOW))
     558:	c5 30       	cpi	r28, 0x05	; 5
     55a:	31 f0       	breq	.+12     	; 0x568 <LCD_Gauge+0x40>
     55c:	c6 30       	cpi	r28, 0x06	; 6
     55e:	31 f4       	brne	.+12     	; 0x56c <LCD_Gauge+0x44>
     560:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <fanRandom>
     564:	85 30       	cpi	r24, 0x05	; 5
	{
		LCD_Gauge_Low();
     566:	11 f4       	brne	.+4      	; 0x56c <LCD_Gauge+0x44>
     568:	83 d4       	rcall	.+2310   	; 0xe70 <LCD_Gauge_Low>
     56a:	13 c0       	rjmp	.+38     	; 0x592 <LCD_Gauge+0x6a>
	}
	else if(fanState == MIDDLE || (fanState == AUTO && fanRandom == MIDDLE))
     56c:	c2 30       	cpi	r28, 0x02	; 2
     56e:	31 f0       	breq	.+12     	; 0x57c <LCD_Gauge+0x54>
     570:	c6 30       	cpi	r28, 0x06	; 6
     572:	31 f4       	brne	.+12     	; 0x580 <LCD_Gauge+0x58>
     574:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <fanRandom>
     578:	82 30       	cpi	r24, 0x02	; 2
	{
		LCD_Gauge_middle();
     57a:	11 f4       	brne	.+4      	; 0x580 <LCD_Gauge+0x58>
     57c:	8e d4       	rcall	.+2332   	; 0xe9a <LCD_Gauge_middle>
     57e:	09 c0       	rjmp	.+18     	; 0x592 <LCD_Gauge+0x6a>
	}
	else if(fanState == HIGH || (fanState == AUTO && fanRandom == HIGH))
     580:	c1 30       	cpi	r28, 0x01	; 1
     582:	31 f0       	breq	.+12     	; 0x590 <LCD_Gauge+0x68>
     584:	c6 30       	cpi	r28, 0x06	; 6
     586:	29 f4       	brne	.+10     	; 0x592 <LCD_Gauge+0x6a>
     588:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <fanRandom>
     58c:	81 30       	cpi	r24, 0x01	; 1
	{
		LCD_Gauge_high();
     58e:	09 f4       	brne	.+2      	; 0x592 <LCD_Gauge+0x6a>
     590:	aa d4       	rcall	.+2388   	; 0xee6 <LCD_Gauge_high>
	}
}
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <Presenter_dispTimeData>:
	LCD_init();
	LCD_I2C_init();
	Fan_init();
}

void Presenter_dispTimeData(uint8_t hour, uint8_t min, uint8_t sec, uint16_t milisec){
     596:	bf 92       	push	r11
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	ec 97       	sbiw	r28, 0x3c	; 60
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	06 2f       	mov	r16, r22
	static uint16_t prevMilisec = 0xff;
	if(milisec/10 == prevMilisec){
     5ba:	ad ec       	ldi	r26, 0xCD	; 205
     5bc:	bc ec       	ldi	r27, 0xCC	; 204
     5be:	b8 d6       	rcall	.+3440   	; 0x1330 <__umulhisi3>
     5c0:	6c 01       	movw	r12, r24
     5c2:	d6 94       	lsr	r13
     5c4:	c7 94       	ror	r12
     5c6:	d6 94       	lsr	r13
     5c8:	c7 94       	ror	r12
     5ca:	d6 94       	lsr	r13
     5cc:	c7 94       	ror	r12
     5ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <prevMilisec.2376>
     5d2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <prevMilisec.2376+0x1>
     5d6:	c8 16       	cp	r12, r24
     5d8:	d9 06       	cpc	r13, r25
     5da:	29 f4       	brne	.+10     	; 0x5e6 <Presenter_dispTimeData+0x50>
		prevMilisec = milisec/10;
     5dc:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <prevMilisec.2376+0x1>
     5e0:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <prevMilisec.2376>
     5e4:	c2 c0       	rjmp	.+388    	; 0x76a <Presenter_dispTimeData+0x1d4>
     5e6:	79 01       	movw	r14, r18
     5e8:	b4 2e       	mov	r11, r20
		return;
	}
	uint16_t stopWatchData;
	stopWatchData = min*100+sec;
     5ea:	84 2f       	mov	r24, r20
     5ec:	90 e0       	ldi	r25, 0x00	; 0
	FND_setFndData(stopWatchData);
     5ee:	24 e6       	ldi	r18, 0x64	; 100
     5f0:	02 9f       	mul	r16, r18
     5f2:	80 0d       	add	r24, r0
     5f4:	91 1d       	adc	r25, r1
     5f6:	11 24       	eor	r1, r1
     5f8:	89 d3       	rcall	.+1810   	; 0xd0c <FND_setFndData>
	if(milisec < 500) FND_colonOn();
     5fa:	34 ef       	ldi	r19, 0xF4	; 244
     5fc:	e3 16       	cp	r14, r19
     5fe:	31 e0       	ldi	r19, 0x01	; 1
     600:	f3 06       	cpc	r15, r19
     602:	10 f4       	brcc	.+4      	; 0x608 <Presenter_dispTimeData+0x72>
	else FND_colonOff();
     604:	8e d3       	rcall	.+1820   	; 0xd22 <FND_colonOn>
     606:	01 c0       	rjmp	.+2      	; 0x60a <Presenter_dispTimeData+0x74>
	
	static uint8_t prevstate;
	uint8_t FanState;
	FanState = Model_getFanStateData();
     608:	90 d3       	rcall	.+1824   	; 0xd2a <FND_colonOff>
     60a:	50 d5       	rcall	.+2720   	; 0x10ac <Model_getFanStateData>
     60c:	18 2f       	mov	r17, r24
	char Fan_buff[30];
	switch(FanState){
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	c9 f1       	breq	.+114    	; 0x684 <Presenter_dispTimeData+0xee>
     612:	30 f4       	brcc	.+12     	; 0x620 <Presenter_dispTimeData+0x8a>
     614:	88 23       	and	r24, r24
     616:	51 f0       	breq	.+20     	; 0x62c <Presenter_dispTimeData+0x96>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	09 f4       	brne	.+2      	; 0x61e <Presenter_dispTimeData+0x88>
     61c:	49 c0       	rjmp	.+146    	; 0x6b0 <Presenter_dispTimeData+0x11a>
     61e:	73 c0       	rjmp	.+230    	; 0x706 <Presenter_dispTimeData+0x170>
     620:	85 30       	cpi	r24, 0x05	; 5
     622:	d1 f0       	breq	.+52     	; 0x658 <Presenter_dispTimeData+0xc2>
     624:	86 30       	cpi	r24, 0x06	; 6
     626:	09 f4       	brne	.+2      	; 0x62a <Presenter_dispTimeData+0x94>
     628:	59 c0       	rjmp	.+178    	; 0x6dc <Presenter_dispTimeData+0x146>
     62a:	6d c0       	rjmp	.+218    	; 0x706 <Presenter_dispTimeData+0x170>
		case OFF:
		sprintf(Fan_buff, "S:%s ", state[0]);
     62c:	e6 e0       	ldi	r30, 0x06	; 6
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	81 81       	ldd	r24, Z+1	; 0x01
     632:	8f 93       	push	r24
     634:	80 81       	ld	r24, Z
     636:	8f 93       	push	r24
     638:	80 e6       	ldi	r24, 0x60	; 96
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	ce 01       	movw	r24, r28
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	0d d7       	rcall	.+3610   	; 0x1464 <sprintf>
		
		break;
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	57 c0       	rjmp	.+174    	; 0x706 <Presenter_dispTimeData+0x170>
		case LOW:
		sprintf(Fan_buff, "S:%s ", state[1]);
     658:	e6 e0       	ldi	r30, 0x06	; 6
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	83 81       	ldd	r24, Z+3	; 0x03
     65e:	8f 93       	push	r24
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	8f 93       	push	r24
     664:	80 e6       	ldi	r24, 0x60	; 96
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	f7 d6       	rcall	.+3566   	; 0x1464 <sprintf>
		
		break;
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	41 c0       	rjmp	.+130    	; 0x706 <Presenter_dispTimeData+0x170>
		case MIDDLE:
		sprintf(Fan_buff, "S:%s ", state[2]);
     684:	e6 e0       	ldi	r30, 0x06	; 6
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	85 81       	ldd	r24, Z+5	; 0x05
     68a:	8f 93       	push	r24
     68c:	84 81       	ldd	r24, Z+4	; 0x04
     68e:	8f 93       	push	r24
     690:	80 e6       	ldi	r24, 0x60	; 96
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	e1 d6       	rcall	.+3522   	; 0x1464 <sprintf>
		
		break;
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	2b c0       	rjmp	.+86     	; 0x706 <Presenter_dispTimeData+0x170>
		case HIGH:
		sprintf(Fan_buff, "S:%s", state[3]);
     6b0:	e6 e0       	ldi	r30, 0x06	; 6
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
     6b4:	87 81       	ldd	r24, Z+7	; 0x07
     6b6:	8f 93       	push	r24
     6b8:	86 81       	ldd	r24, Z+6	; 0x06
     6ba:	8f 93       	push	r24
     6bc:	86 e6       	ldi	r24, 0x66	; 102
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	cb d6       	rcall	.+3478   	; 0x1464 <sprintf>
		
		break;
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	15 c0       	rjmp	.+42     	; 0x706 <Presenter_dispTimeData+0x170>
		case AUTO:
		sprintf(Fan_buff, "S:%s", state[4]);
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	81 85       	ldd	r24, Z+9	; 0x09
     6e2:	8f 93       	push	r24
     6e4:	80 85       	ldd	r24, Z+8	; 0x08
     6e6:	8f 93       	push	r24
     6e8:	86 e6       	ldi	r24, 0x66	; 102
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	b5 d6       	rcall	.+3434   	; 0x1464 <sprintf>
		
		break;
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
	}
	char buff[30];
	sprintf(buff,"Timer Set");
     706:	7e 01       	movw	r14, r28
     708:	8f e1       	ldi	r24, 0x1F	; 31
     70a:	e8 0e       	add	r14, r24
     70c:	f1 1c       	adc	r15, r1
     70e:	8a e0       	ldi	r24, 0x0A	; 10
     710:	eb e6       	ldi	r30, 0x6B	; 107
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	d7 01       	movw	r26, r14
     716:	01 90       	ld	r0, Z+
     718:	0d 92       	st	X+, r0
     71a:	8a 95       	dec	r24
	LCD_writeStringXY(0,3,buff);
     71c:	e1 f7       	brne	.-8      	; 0x716 <Presenter_dispTimeData+0x180>
     71e:	a7 01       	movw	r20, r14
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	b7 d4       	rcall	.+2414   	; 0x1094 <LCD_writeStringXY>
	sprintf(buff,"%02d:%02d:%02d", min, sec, milisec/10);
     726:	df 92       	push	r13
     728:	cf 92       	push	r12
     72a:	1f 92       	push	r1
     72c:	bf 92       	push	r11
     72e:	1f 92       	push	r1
     730:	0f 93       	push	r16
     732:	85 e7       	ldi	r24, 0x75	; 117
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	ff 92       	push	r15
	LCD_writeStringXY(1,1,strcat(Fan_buff, buff));
     73c:	ef 92       	push	r14
     73e:	92 d6       	rcall	.+3364   	; 0x1464 <sprintf>
     740:	b7 01       	movw	r22, r14
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	7a d6       	rcall	.+3316   	; 0x143c <strcat>
     748:	ac 01       	movw	r20, r24
     74a:	61 e0       	ldi	r22, 0x01	; 1
	if(FanState != prevstate)
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	a2 d4       	rcall	.+2372   	; 0x1094 <LCD_writeStringXY>
     750:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <prevstate.2378>
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
	{
		LCD_I2C_clearDisplay();
     75e:	18 17       	cp	r17, r24
     760:	19 f0       	breq	.+6      	; 0x768 <Presenter_dispTimeData+0x1d2>
		prevstate = FanState;
     762:	83 d3       	rcall	.+1798   	; 0xe6a <LCD_I2C_clearDisplay>
     764:	10 93 9b 01 	sts	0x019B, r17	; 0x80019b <prevstate.2378>
	}
	LCD_Gauge();
     768:	df de       	rcall	.-578    	; 0x528 <LCD_Gauge>
}
     76a:	ec 96       	adiw	r28, 0x3c	; 60
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	08 95       	ret

0000078a <DigitalFan_init>:
static uint8_t lastTimerState;
uint8_t fanRandom;
static uint16_t counter;

void DigitalFan_init(){
	lastTimerState = NONE;
     78a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <lastTimerState>
	milisec = 0;
     78e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <milisec+0x1>
     792:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <milisec>
	sec = 0;
     796:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <sec>
	min = 0;
     79a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <min>
	hour = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <hour>
     7a4:	08 95       	ret

000007a6 <DigitalFan_dicmilisec>:
}

void DigitalFan_dicmilisec()
{
	uint8_t TimerState;
	TimerState = Model_getTimerStateData();
     7a6:	88 d4       	rcall	.+2320   	; 0x10b8 <Model_getTimerStateData>
	if(TimerState != NONE) {
     7a8:	88 23       	and	r24, r24
     7aa:	51 f1       	breq	.+84     	; 0x800 <DigitalFan_dicmilisec+0x5a>
		milisec = (milisec - 1 + 1000) % 1000;
     7ac:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <milisec>
     7b0:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <milisec+0x1>
     7b4:	49 51       	subi	r20, 0x19	; 25
     7b6:	5c 4f       	sbci	r21, 0xFC	; 252
     7b8:	9a 01       	movw	r18, r20
     7ba:	36 95       	lsr	r19
     7bc:	27 95       	ror	r18
     7be:	36 95       	lsr	r19
     7c0:	27 95       	ror	r18
     7c2:	36 95       	lsr	r19
     7c4:	27 95       	ror	r18
     7c6:	a5 ec       	ldi	r26, 0xC5	; 197
     7c8:	b0 e2       	ldi	r27, 0x20	; 32
     7ca:	b2 d5       	rcall	.+2916   	; 0x1330 <__umulhisi3>
     7cc:	92 95       	swap	r25
     7ce:	82 95       	swap	r24
     7d0:	8f 70       	andi	r24, 0x0F	; 15
     7d2:	89 27       	eor	r24, r25
     7d4:	9f 70       	andi	r25, 0x0F	; 15
     7d6:	89 27       	eor	r24, r25
     7d8:	68 ee       	ldi	r22, 0xE8	; 232
     7da:	73 e0       	ldi	r23, 0x03	; 3
     7dc:	86 9f       	mul	r24, r22
     7de:	90 01       	movw	r18, r0
     7e0:	87 9f       	mul	r24, r23
     7e2:	30 0d       	add	r19, r0
     7e4:	96 9f       	mul	r25, r22
     7e6:	30 0d       	add	r19, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	ca 01       	movw	r24, r20
     7ec:	82 1b       	sub	r24, r18
     7ee:	93 0b       	sbc	r25, r19
     7f0:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <milisec+0x1>
     7f4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <milisec>
		} else {
		DigitalFan_init();
		return;
	}
	if(milisec != 999) return;
     7f8:	87 3e       	cpi	r24, 0xE7	; 231
     7fa:	93 40       	sbci	r25, 0x03	; 3
     7fc:	11 f5       	brne	.+68     	; 0x842 <DigitalFan_dicmilisec+0x9c>
	uint8_t TimerState;
	TimerState = Model_getTimerStateData();
	if(TimerState != NONE) {
		milisec = (milisec - 1 + 1000) % 1000;
		} else {
		DigitalFan_init();
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <DigitalFan_dicmilisec+0x5e>
     800:	c4 cf       	rjmp	.-120    	; 0x78a <DigitalFan_init>
		return;
     802:	08 95       	ret
	}
	if(milisec != 999) return;
	sec = (sec - 1 + 60) % 60;
     804:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <sec>
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	cb 96       	adiw	r24, 0x3b	; 59
     80c:	6c e3       	ldi	r22, 0x3C	; 60
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	60 d5       	rcall	.+2752   	; 0x12d2 <__divmodhi4>
     812:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <sec>

	if(sec != 59) return;
     816:	8b 33       	cpi	r24, 0x3B	; 59
     818:	a1 f4       	brne	.+40     	; 0x842 <DigitalFan_dicmilisec+0x9c>
	min = (min - 1 + 60) % 60;
     81a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <min>
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	cb 96       	adiw	r24, 0x3b	; 59
     822:	6c e3       	ldi	r22, 0x3C	; 60
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	55 d5       	rcall	.+2730   	; 0x12d2 <__divmodhi4>
     828:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <min>

	if(min != 59) return;
     82c:	8b 33       	cpi	r24, 0x3B	; 59
     82e:	49 f4       	brne	.+18     	; 0x842 <DigitalFan_dicmilisec+0x9c>
	hour = (hour - 1 + 24) % 24;
     830:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <hour>
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	47 96       	adiw	r24, 0x17	; 23
     838:	68 e1       	ldi	r22, 0x18	; 24
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	4a d5       	rcall	.+2708   	; 0x12d2 <__divmodhi4>
     83e:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <hour>
     842:	08 95       	ret

00000844 <DigitalFan_Timecalc>:
	min = 0;
	hour = 1;
}

void DigitalFan_Timecalc(){
	if((hour != 0 || min != 0 || sec != 0 || milisec != 0)) DigitalFan_dicmilisec();
     844:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <hour>
     848:	81 11       	cpse	r24, r1
     84a:	0e c0       	rjmp	.+28     	; 0x868 <DigitalFan_Timecalc+0x24>
     84c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <min>
     850:	81 11       	cpse	r24, r1
     852:	0a c0       	rjmp	.+20     	; 0x868 <DigitalFan_Timecalc+0x24>
     854:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <sec>
     858:	81 11       	cpse	r24, r1
     85a:	06 c0       	rjmp	.+12     	; 0x868 <DigitalFan_Timecalc+0x24>
     85c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <milisec>
     860:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <milisec+0x1>
     864:	89 2b       	or	r24, r25
     866:	11 f0       	breq	.+4      	; 0x86c <DigitalFan_Timecalc+0x28>
     868:	9e cf       	rjmp	.-196    	; 0x7a6 <DigitalFan_dicmilisec>
     86a:	08 95       	ret
	else{
		lastTimerState = NONE;
     86c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <lastTimerState>
		Model_setTimerStateData(NONE);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	25 d4       	rcall	.+2122   	; 0x10be <Model_setTimerStateData>
		Model_setFanStateData(OFF);
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	1d c4       	rjmp	.+2106   	; 0x10b2 <Model_setFanStateData>
     878:	08 95       	ret

0000087a <set_Time>:
     87a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <hour>
	Presenter_dispTimeData(hour, min, sec, milisec);
}

void set_Time(uint8_t hour1, uint8_t min1, uint8_t sec1, uint16_t milisec1){
	hour = hour1;
	min = min1;
     87e:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <min>
	sec = sec1;
     882:	40 93 a1 01 	sts	0x01A1, r20	; 0x8001a1 <sec>
	milisec = milisec1;
     886:	30 93 a3 01 	sts	0x01A3, r19	; 0x8001a3 <milisec+0x1>
     88a:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <milisec>
     88e:	08 95       	ret

00000890 <DigitalFan_Timer>:

void DigitalFan_execute(){
	DigitalFan_Timer();
}

void DigitalFan_Timer(){
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
	uint8_t TimerState;
	uint8_t FanState;
	uint8_t* TimeUartState;
	
	TimerState = Model_getTimerStateData();
     898:	0f d4       	rcall	.+2078   	; 0x10b8 <Model_getTimerStateData>
     89a:	c8 2f       	mov	r28, r24
	FanState = Model_getFanStateData();
     89c:	07 d4       	rcall	.+2062   	; 0x10ac <Model_getFanStateData>
     89e:	d8 2f       	mov	r29, r24
	TimeUartState = Model_getTimerUartStateData();
     8a0:	11 d4       	rcall	.+2082   	; 0x10c4 <Model_getTimerUartStateData>
     8a2:	8c 01       	movw	r16, r24
     8a4:	dd 23       	and	r29, r29
	if(FanState != OFF){
     8a6:	09 f4       	brne	.+2      	; 0x8aa <DigitalFan_Timer+0x1a>
     8a8:	48 c0       	rjmp	.+144    	; 0x93a <DigitalFan_Timer+0xaa>
     8aa:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <lastTimerState>
		if(TimerState != lastTimerState) {
     8ae:	c8 17       	cp	r28, r24
     8b0:	79 f1       	breq	.+94     	; 0x910 <DigitalFan_Timer+0x80>
     8b2:	c1 30       	cpi	r28, 0x01	; 1
			if(TimerState == THREE || (!strcmp((char *)TimeUartState, "TIME_3min\n"))) set_Time(0,0,3,0);
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <DigitalFan_Timer+0x32>
     8b6:	6f e3       	ldi	r22, 0x3F	; 63
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	c8 01       	movw	r24, r16
     8bc:	ca d5       	rcall	.+2964   	; 0x1452 <strcmp>
     8be:	89 2b       	or	r24, r25
     8c0:	39 f4       	brne	.+14     	; 0x8d0 <DigitalFan_Timer+0x40>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	43 e0       	ldi	r20, 0x03	; 3
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	d6 df       	rcall	.-84     	; 0x87a <set_Time>
     8ce:	1d c0       	rjmp	.+58     	; 0x90a <DigitalFan_Timer+0x7a>
     8d0:	c2 30       	cpi	r28, 0x02	; 2
			else if(TimerState == FIVE || (!strcmp((char *)TimeUartState, "TIME_5min\n"))) set_Time(0,0,5,0);
     8d2:	31 f0       	breq	.+12     	; 0x8e0 <DigitalFan_Timer+0x50>
     8d4:	6a e4       	ldi	r22, 0x4A	; 74
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	c8 01       	movw	r24, r16
     8da:	bb d5       	rcall	.+2934   	; 0x1452 <strcmp>
     8dc:	89 2b       	or	r24, r25
     8de:	39 f4       	brne	.+14     	; 0x8ee <DigitalFan_Timer+0x5e>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	45 e0       	ldi	r20, 0x05	; 5
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	c7 df       	rcall	.-114    	; 0x87a <set_Time>
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <DigitalFan_Timer+0x7a>
			else if(TimerState == SEVEN || (!strcmp((char *)TimeUartState, "TIME_7min\n"))) set_Time(0,0,7,0);
     8ee:	c3 30       	cpi	r28, 0x03	; 3
     8f0:	31 f0       	breq	.+12     	; 0x8fe <DigitalFan_Timer+0x6e>
     8f2:	65 e5       	ldi	r22, 0x55	; 85
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	c8 01       	movw	r24, r16
     8f8:	ac d5       	rcall	.+2904   	; 0x1452 <strcmp>
     8fa:	89 2b       	or	r24, r25
     8fc:	31 f4       	brne	.+12     	; 0x90a <DigitalFan_Timer+0x7a>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	47 e0       	ldi	r20, 0x07	; 7
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	b8 df       	rcall	.-144    	; 0x87a <set_Time>
     90a:	c0 93 9e 01 	sts	0x019E, r28	; 0x80019e <lastTimerState>
			lastTimerState = TimerState;
     90e:	21 c0       	rjmp	.+66     	; 0x952 <DigitalFan_Timer+0xc2>
     910:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <hour>
		}
		else if(!(hour != 0 || min != 0 || sec != 0 || milisec != 0))
     914:	81 11       	cpse	r24, r1
     916:	1d c0       	rjmp	.+58     	; 0x952 <DigitalFan_Timer+0xc2>
     918:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <min>
     91c:	81 11       	cpse	r24, r1
     91e:	19 c0       	rjmp	.+50     	; 0x952 <DigitalFan_Timer+0xc2>
     920:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <sec>
     924:	81 11       	cpse	r24, r1
     926:	15 c0       	rjmp	.+42     	; 0x952 <DigitalFan_Timer+0xc2>
     928:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <milisec>
     92c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <milisec+0x1>
     930:	89 2b       	or	r24, r25
		{
			Model_setFanStateData(OFF);
     932:	79 f4       	brne	.+30     	; 0x952 <DigitalFan_Timer+0xc2>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	bd d3       	rcall	.+1914   	; 0x10b2 <Model_setFanStateData>
		}
	}
	else{
		set_Time(1,0,0,0);
     938:	0c c0       	rjmp	.+24     	; 0x952 <DigitalFan_Timer+0xc2>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
		lastTimerState = NONE;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	9a df       	rcall	.-204    	; 0x87a <set_Time>
		Model_setTimerStateData(NONE);
     946:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <lastTimerState>
     94a:	80 e0       	ldi	r24, 0x00	; 0
		Model_setFanStateData(OFF);
     94c:	b8 d3       	rcall	.+1904   	; 0x10be <Model_setTimerStateData>
     94e:	80 e0       	ldi	r24, 0x00	; 0
		
	}
	Presenter_FanData();
     950:	b0 d3       	rcall	.+1888   	; 0x10b2 <Model_setFanStateData>
     952:	df dd       	rcall	.-1090   	; 0x512 <Presenter_FanData>
	Presenter_dispTimeData(hour, min, sec, milisec);
     954:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <milisec>
     958:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <milisec+0x1>
     95c:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <sec>
     960:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <min>
     964:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <hour>
     968:	16 de       	rcall	.-980    	; 0x596 <Presenter_dispTimeData>
     96a:	df 91       	pop	r29
}
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <DigitalFan_execute>:
     974:	8d cf       	rjmp	.-230    	; 0x890 <DigitalFan_Timer>
	if(min != 59) return;
	hour = (hour - 1 + 24) % 24;
}

void DigitalFan_execute(){
	DigitalFan_Timer();
     976:	08 95       	ret

00000978 <DigitalFan_AutoData>:
	}
}

void DigitalFan_AutoData()
{
	fanRandom = rand() % 4;
     978:	53 d5       	rcall	.+2726   	; 0x1420 <rand>
     97a:	83 70       	andi	r24, 0x03	; 3
     97c:	90 78       	andi	r25, 0x80	; 128
     97e:	99 23       	and	r25, r25
     980:	24 f4       	brge	.+8      	; 0x98a <DigitalFan_AutoData+0x12>
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	8c 6f       	ori	r24, 0xFC	; 252
     986:	9f 6f       	ori	r25, 0xFF	; 255
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <fanRandom>
	switch(fanRandom){
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	49 f0       	breq	.+18     	; 0x9a4 <DigitalFan_AutoData+0x2c>
     992:	28 f0       	brcs	.+10     	; 0x99e <DigitalFan_AutoData+0x26>
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	51 f0       	breq	.+20     	; 0x9ac <DigitalFan_AutoData+0x34>
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	61 f0       	breq	.+24     	; 0x9b4 <DigitalFan_AutoData+0x3c>
     99c:	08 95       	ret
		case 0:
		fanRandom = OFF;
     99e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <fanRandom>
		break;
     9a2:	08 95       	ret
		case 1:
		fanRandom = LOW;
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <fanRandom>
		break;
     9aa:	08 95       	ret
		case 2:
		fanRandom = MIDDLE;
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <fanRandom>
		break;
     9b2:	08 95       	ret
		case 3:
		fanRandom = HIGH;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <fanRandom>
     9ba:	08 95       	ret

000009bc <DigitalFan_Autocalc>:
}

void DigitalFan_Autocalc()
{
	uint8_t fanState;
	fanState = Model_getFanStateData();
     9bc:	77 d3       	rcall	.+1774   	; 0x10ac <Model_getFanStateData>
	if(fanState == AUTO)
     9be:	86 30       	cpi	r24, 0x06	; 6
     9c0:	89 f4       	brne	.+34     	; 0x9e4 <DigitalFan_Autocalc+0x28>
	{
		counter++;
     9c2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <counter>
     9c6:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <counter+0x1>
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <counter+0x1>
     9d0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <counter>
		if(counter >= 2000)
     9d4:	80 3d       	cpi	r24, 0xD0	; 208
     9d6:	97 40       	sbci	r25, 0x07	; 7
		{
			DigitalFan_AutoData();
     9d8:	28 f0       	brcs	.+10     	; 0x9e4 <DigitalFan_Autocalc+0x28>
     9da:	ce df       	rcall	.-100    	; 0x978 <DigitalFan_AutoData>
			counter = 0;
     9dc:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <counter+0x1>
     9e0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <counter>
     9e4:	08 95       	ret

000009e6 <Button_init>:
ï»¿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t* ddr, volatile uint8_t* pin, uint8_t pinNum){
     9e6:	fc 01       	movw	r30, r24
     9e8:	cb 01       	movw	r24, r22
	btn->DDR = ddr;
     9ea:	71 83       	std	Z+1, r23	; 0x01
     9ec:	60 83       	st	Z, r22
	btn->PIN = pin;
     9ee:	53 83       	std	Z+3, r21	; 0x03
     9f0:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinNum;
     9f2:	24 83       	std	Z+4, r18	; 0x04
	btn->prevState = 1;
     9f4:	31 e0       	ldi	r19, 0x01	; 1
     9f6:	35 83       	std	Z+5, r19	; 0x05
	Gpio_initPin(btn->DDR, INPUT, btn->pinNum);
     9f8:	42 2f       	mov	r20, r18
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	76 c3       	rjmp	.+1772   	; 0x10ea <Gpio_initPin>
     9fe:	08 95       	ret

00000a00 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn){
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
	uint8_t curState = Gpio_readPin(btn->PIN, btn->pinNum);
     a06:	6c 81       	ldd	r22, Y+4	; 0x04
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	9b 81       	ldd	r25, Y+3	; 0x03
     a0c:	a6 d3       	rcall	.+1868   	; 0x115a <Gpio_readPin>
	if((curState == 0) && (btn->prevState == 1)){
     a0e:	81 11       	cpse	r24, r1
     a10:	0c c0       	rjmp	.+24     	; 0xa2a <Button_GetState+0x2a>
     a12:	9d 81       	ldd	r25, Y+5	; 0x05
     a14:	91 30       	cpi	r25, 0x01	; 1
     a16:	49 f4       	brne	.+18     	; 0xa2a <Button_GetState+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a18:	8f e3       	ldi	r24, 0x3F	; 63
     a1a:	9c e9       	ldi	r25, 0x9C	; 156
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <Button_GetState+0x1c>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <Button_GetState+0x22>
     a22:	00 00       	nop
		_delay_ms(10);
		btn->prevState = PUSHED;
     a24:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <Button_GetState+0x4c>
	}
	else if((curState != 0) && (btn->prevState == 0)){
     a2a:	88 23       	and	r24, r24
     a2c:	61 f0       	breq	.+24     	; 0xa46 <Button_GetState+0x46>
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	81 11       	cpse	r24, r1
     a32:	0b c0       	rjmp	.+22     	; 0xa4a <Button_GetState+0x4a>
     a34:	8f e3       	ldi	r24, 0x3F	; 63
     a36:	9c e9       	ldi	r25, 0x9C	; 156
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <Button_GetState+0x38>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <Button_GetState+0x3e>
     a3e:	00 00       	nop
		_delay_ms(10);
		btn->prevState = RELEASED;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_RELEASED;
     a44:	03 c0       	rjmp	.+6      	; 0xa4c <Button_GetState+0x4c>
	}
	return ACT_NONE;
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <Button_GetState+0x4c>
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <Buzzer_init>:
ï»¿#include "Buzzer.h"

void Buzzer_init(){
	DDRB |= (1<<5);
     a52:	87 b3       	in	r24, 0x17	; 23
     a54:	80 62       	ori	r24, 0x20	; 32
     a56:	87 bb       	out	0x17, r24	; 23
     a58:	08 95       	ret

00000a5a <Buzzer_soundOn>:
}

void Buzzer_soundOn(){
	TCCR1A |= ((1<<COM1A1) | (0<<COM1A0));	// non-inverting mode
     a5a:	8f b5       	in	r24, 0x2f	; 47
     a5c:	80 68       	ori	r24, 0x80	; 128
     a5e:	8f bd       	out	0x2f, r24	; 47
     a60:	08 95       	ret

00000a62 <Buzzer_soundOff>:
}

void Buzzer_soundOff(){
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));	// disconnected
     a62:	8f b5       	in	r24, 0x2f	; 47
     a64:	8f 73       	andi	r24, 0x3F	; 63
     a66:	8f bd       	out	0x2f, r24	; 47
     a68:	08 95       	ret

00000a6a <Buzzer_makeHertz>:
}

void Buzzer_makeHertz(uint16_t hertz){
	if(hertz < 100) hertz = 100;
     a6a:	84 36       	cpi	r24, 0x64	; 100
     a6c:	91 05       	cpc	r25, r1
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <Buzzer_makeHertz+0x10>
	else if(hertz > 5000) hertz = 5000;
     a70:	89 38       	cpi	r24, 0x89	; 137
     a72:	23 e1       	ldi	r18, 0x13	; 19
     a74:	92 07       	cpc	r25, r18
     a76:	20 f4       	brcc	.+8      	; 0xa80 <Buzzer_makeHertz+0x16>
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <Buzzer_makeHertz+0x1a>
void Buzzer_soundOff(){
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));	// disconnected
}

void Buzzer_makeHertz(uint16_t hertz){
	if(hertz < 100) hertz = 100;
     a7a:	84 e6       	ldi	r24, 0x64	; 100
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <Buzzer_makeHertz+0x1a>
	else if(hertz > 5000) hertz = 5000;
     a80:	88 e8       	ldi	r24, 0x88	; 136
     a82:	93 e1       	ldi	r25, 0x13	; 19
	BUZZER_ICR = (250000 / hertz) - 1;
     a84:	9c 01       	movw	r18, r24
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	60 e9       	ldi	r22, 0x90	; 144
     a8c:	70 ed       	ldi	r23, 0xD0	; 208
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	32 d4       	rcall	.+2148   	; 0x12f8 <__divmodsi4>
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	31 09       	sbc	r19, r1
     a98:	37 bd       	out	0x27, r19	; 39
     a9a:	26 bd       	out	0x26, r18	; 38
	BUZZER_OCR = BUZZER_ICR / 4;
     a9c:	86 b5       	in	r24, 0x26	; 38
     a9e:	97 b5       	in	r25, 0x27	; 39
     aa0:	96 95       	lsr	r25
     aa2:	87 95       	ror	r24
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	9b bd       	out	0x2b, r25	; 43
     aaa:	8a bd       	out	0x2a, r24	; 42
     aac:	08 95       	ret

00000aae <Buzzer_buttonOn>:
}

void Buzzer_buttonOn(uint16_t hertz){
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	ec 01       	movw	r28, r24
	Buzzer_soundOn();
     ab4:	d2 df       	rcall	.-92     	; 0xa5a <Buzzer_soundOn>
	Buzzer_makeHertz(hertz);
     ab6:	ce 01       	movw	r24, r28
     ab8:	d8 df       	rcall	.-80     	; 0xa6a <Buzzer_makeHertz>
     aba:	2f ef       	ldi	r18, 0xFF	; 255
     abc:	87 e8       	ldi	r24, 0x87	; 135
     abe:	93 e1       	ldi	r25, 0x13	; 19
     ac0:	21 50       	subi	r18, 0x01	; 1
     ac2:	80 40       	sbci	r24, 0x00	; 0
     ac4:	90 40       	sbci	r25, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <Buzzer_buttonOn+0x12>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <Buzzer_buttonOn+0x1c>
	_delay_ms(400);
	Buzzer_soundOff();
     aca:	00 00       	nop
     acc:	ca df       	rcall	.-108    	; 0xa62 <Buzzer_soundOff>
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <Fan_init>:
ï»¿#include "Fan.h"

uint16_t FanData;

void Fan_init(){
	Gpio_initPin(&DDRE, OUTPUT, 3);
     ad4:	43 e0       	ldi	r20, 0x03	; 3
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	82 e2       	ldi	r24, 0x22	; 34
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	06 c3       	rjmp	.+1548   	; 0x10ea <Gpio_initPin>
     ade:	08 95       	ret

00000ae0 <Fan_speedMode>:
}

void Fan_speedMode(uint16_t data){
     ae0:	bc 01       	movw	r22, r24
	FAN_ICR = (250000 / 250) - 1;
     ae2:	87 ee       	ldi	r24, 0xE7	; 231
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     aea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	if(data == 0) FAN_OCR = 0;
     aee:	61 15       	cp	r22, r1
     af0:	71 05       	cpc	r23, r1
     af2:	29 f4       	brne	.+10     	; 0xafe <Fan_speedMode+0x1e>
     af4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     af8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     afc:	08 95       	ret
	else FAN_OCR = FAN_ICR / data;
     afe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     b02:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b06:	d1 d3       	rcall	.+1954   	; 0x12aa <__udivmodhi4>
     b08:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b0c:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b10:	08 95       	ret

00000b12 <FND_init>:
void FND_Off(){
	FND_DATA_DDR = 0x00;
}

void FND_On(){
	FND_DATA_DDR = 0xff;
     b12:	82 b1       	in	r24, 0x02	; 2
     b14:	80 6f       	ori	r24, 0xF0	; 240
     b16:	82 b9       	out	0x02, r24	; 2
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     b1e:	08 95       	ret

00000b20 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	2b 97       	sbiw	r28, 0x0b	; 11
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	8c 01       	movw	r16, r24
	uint8_t fndFont[11] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67, 0x80};
     b3a:	8b e0       	ldi	r24, 0x0B	; 11
     b3c:	e0 e1       	ldi	r30, 0x10	; 16
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	de 01       	movw	r26, r28
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	8a 95       	dec	r24
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1) % 5;
     b4c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <fndDigitState.1750>
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	65 e0       	ldi	r22, 0x05	; 5
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	bc d3       	rcall	.+1912   	; 0x12d2 <__divmodhi4>
     b5a:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <fndDigitState.1750>
	
	switch(fndDigitState)
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	09 f4       	brne	.+2      	; 0xb64 <FND_dispNum+0x44>
     b62:	60 c0       	rjmp	.+192    	; 0xc24 <FND_dispNum+0x104>
     b64:	28 f4       	brcc	.+10     	; 0xb70 <FND_dispNum+0x50>
     b66:	88 23       	and	r24, r24
     b68:	51 f0       	breq	.+20     	; 0xb7e <FND_dispNum+0x5e>
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	41 f1       	breq	.+80     	; 0xbbe <FND_dispNum+0x9e>
     b6e:	c3 c0       	rjmp	.+390    	; 0xcf6 <FND_dispNum+0x1d6>
     b70:	83 30       	cpi	r24, 0x03	; 3
     b72:	09 f4       	brne	.+2      	; 0xb76 <FND_dispNum+0x56>
     b74:	88 c0       	rjmp	.+272    	; 0xc86 <FND_dispNum+0x166>
     b76:	84 30       	cpi	r24, 0x04	; 4
     b78:	09 f4       	brne	.+2      	; 0xb7c <FND_dispNum+0x5c>
     b7a:	ad c0       	rjmp	.+346    	; 0xcd6 <FND_dispNum+0x1b6>
     b7c:	bc c0       	rjmp	.+376    	; 0xcf6 <FND_dispNum+0x1d6>
	{
		case 0:
		PORTE |= ((1<<7) | (1<<6) | (1<<5) | (1<<4));
     b7e:	83 b1       	in	r24, 0x03	; 3
     b80:	80 6f       	ori	r24, 0xF0	; 240
     b82:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/1000];
     b84:	98 01       	movw	r18, r16
     b86:	36 95       	lsr	r19
     b88:	27 95       	ror	r18
     b8a:	36 95       	lsr	r19
     b8c:	27 95       	ror	r18
     b8e:	36 95       	lsr	r19
     b90:	27 95       	ror	r18
     b92:	a5 ec       	ldi	r26, 0xC5	; 197
     b94:	b0 e2       	ldi	r27, 0x20	; 32
     b96:	cc d3       	rcall	.+1944   	; 0x1330 <__umulhisi3>
     b98:	92 95       	swap	r25
     b9a:	82 95       	swap	r24
     b9c:	8f 70       	andi	r24, 0x0F	; 15
     b9e:	89 27       	eor	r24, r25
     ba0:	9f 70       	andi	r25, 0x0F	; 15
     ba2:	89 27       	eor	r24, r25
     ba4:	e1 e0       	ldi	r30, 0x01	; 1
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	e8 0f       	add	r30, r24
     bae:	f9 1f       	adc	r31, r25
     bb0:	80 81       	ld	r24, Z
     bb2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<4);
     bb6:	83 b1       	in	r24, 0x03	; 3
     bb8:	8f 7e       	andi	r24, 0xEF	; 239
     bba:	83 b9       	out	0x03, r24	; 3
		break;
     bbc:	9c c0       	rjmp	.+312    	; 0xcf6 <FND_dispNum+0x1d6>
		case 1:
		PORTE |= ((1<<7) | (1<<6) | (1<<5) | (1<<4));
     bbe:	83 b1       	in	r24, 0x03	; 3
     bc0:	80 6f       	ori	r24, 0xF0	; 240
     bc2:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/100%10];
     bc4:	98 01       	movw	r18, r16
     bc6:	36 95       	lsr	r19
     bc8:	27 95       	ror	r18
     bca:	36 95       	lsr	r19
     bcc:	27 95       	ror	r18
     bce:	ab e7       	ldi	r26, 0x7B	; 123
     bd0:	b4 e1       	ldi	r27, 0x14	; 20
     bd2:	ae d3       	rcall	.+1884   	; 0x1330 <__umulhisi3>
     bd4:	ac 01       	movw	r20, r24
     bd6:	56 95       	lsr	r21
     bd8:	47 95       	ror	r20
     bda:	9a 01       	movw	r18, r20
     bdc:	ad ec       	ldi	r26, 0xCD	; 205
     bde:	bc ec       	ldi	r27, 0xCC	; 204
     be0:	a7 d3       	rcall	.+1870   	; 0x1330 <__umulhisi3>
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	96 95       	lsr	r25
     be8:	87 95       	ror	r24
     bea:	96 95       	lsr	r25
     bec:	87 95       	ror	r24
     bee:	9c 01       	movw	r18, r24
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	9a 01       	movw	r18, r20
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
     c0a:	e1 e0       	ldi	r30, 0x01	; 1
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ec 0f       	add	r30, r28
     c10:	fd 1f       	adc	r31, r29
     c12:	e2 0f       	add	r30, r18
     c14:	f3 1f       	adc	r31, r19
     c16:	80 81       	ld	r24, Z
     c18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<5);
     c1c:	83 b1       	in	r24, 0x03	; 3
     c1e:	8f 7d       	andi	r24, 0xDF	; 223
     c20:	83 b9       	out	0x03, r24	; 3
		break;
     c22:	69 c0       	rjmp	.+210    	; 0xcf6 <FND_dispNum+0x1d6>
		case 2:
		PORTE |= ((1<<7) | (1<<6) | (1<<5) | (1<<4));
     c24:	83 b1       	in	r24, 0x03	; 3
     c26:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum/10%10];
     c28:	83 b9       	out	0x03, r24	; 3
     c2a:	98 01       	movw	r18, r16
     c2c:	ad ec       	ldi	r26, 0xCD	; 205
     c2e:	bc ec       	ldi	r27, 0xCC	; 204
     c30:	7f d3       	rcall	.+1790   	; 0x1330 <__umulhisi3>
     c32:	ac 01       	movw	r20, r24
     c34:	56 95       	lsr	r21
     c36:	47 95       	ror	r20
     c38:	56 95       	lsr	r21
     c3a:	47 95       	ror	r20
     c3c:	56 95       	lsr	r21
     c3e:	47 95       	ror	r20
     c40:	9a 01       	movw	r18, r20
     c42:	76 d3       	rcall	.+1772   	; 0x1330 <__umulhisi3>
     c44:	96 95       	lsr	r25
     c46:	87 95       	ror	r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	96 95       	lsr	r25
     c4e:	87 95       	ror	r24
     c50:	9c 01       	movw	r18, r24
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	82 0f       	add	r24, r18
     c64:	93 1f       	adc	r25, r19
     c66:	9a 01       	movw	r18, r20
     c68:	28 1b       	sub	r18, r24
     c6a:	39 0b       	sbc	r19, r25
     c6c:	e1 e0       	ldi	r30, 0x01	; 1
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ec 0f       	add	r30, r28
     c72:	fd 1f       	adc	r31, r29
     c74:	e2 0f       	add	r30, r18
     c76:	f3 1f       	adc	r31, r19
     c78:	80 81       	ld	r24, Z
     c7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<6);
     c7e:	83 b1       	in	r24, 0x03	; 3
     c80:	8f 7b       	andi	r24, 0xBF	; 191
     c82:	83 b9       	out	0x03, r24	; 3
		break;
     c84:	38 c0       	rjmp	.+112    	; 0xcf6 <FND_dispNum+0x1d6>
		case 3:
		PORTE |= ((1<<7) | (1<<6) | (1<<5) | (1<<4));
     c86:	83 b1       	in	r24, 0x03	; 3
     c88:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum%10];
     c8a:	83 b9       	out	0x03, r24	; 3
     c8c:	98 01       	movw	r18, r16
     c8e:	ad ec       	ldi	r26, 0xCD	; 205
     c90:	bc ec       	ldi	r27, 0xCC	; 204
     c92:	4e d3       	rcall	.+1692   	; 0x1330 <__umulhisi3>
     c94:	96 95       	lsr	r25
     c96:	87 95       	ror	r24
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	9c 01       	movw	r18, r24
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	98 01       	movw	r18, r16
     cb8:	28 1b       	sub	r18, r24
     cba:	39 0b       	sbc	r19, r25
     cbc:	e1 e0       	ldi	r30, 0x01	; 1
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	ec 0f       	add	r30, r28
     cc2:	fd 1f       	adc	r31, r29
     cc4:	e2 0f       	add	r30, r18
     cc6:	f3 1f       	adc	r31, r19
     cc8:	80 81       	ld	r24, Z
     cca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<7);
     cce:	83 b1       	in	r24, 0x03	; 3
     cd0:	8f 77       	andi	r24, 0x7F	; 127
     cd2:	83 b9       	out	0x03, r24	; 3
		break;
     cd4:	10 c0       	rjmp	.+32     	; 0xcf6 <FND_dispNum+0x1d6>
		case 4:
		PORTE |= ((1<<7) | (1<<6) | (1<<5) | (1<<4));
     cd6:	83 b1       	in	r24, 0x03	; 3
     cd8:	80 6f       	ori	r24, 0xF0	; 240
     cda:	83 b9       	out	0x03, r24	; 3
		PORTE &= ~(1<<5);
     cdc:	83 b1       	in	r24, 0x03	; 3
     cde:	8f 7d       	andi	r24, 0xDF	; 223
     ce0:	83 b9       	out	0x03, r24	; 3
		if(fndColonFlag) PORTF = fndFont[10];
     ce2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <fndColonFlag>
     ce6:	88 23       	and	r24, r24
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <FND_dispNum+0x1d2>
     cea:	8b 85       	ldd	r24, Y+11	; 0x0b
     cec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <FND_dispNum+0x1d6>
		else PORTF = 0x00;
     cf2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		break;
	}
}
     cf6:	2b 96       	adiw	r28, 0x0b	; 11
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <FND_setFndData>:

void FND_setFndData(uint16_t data)
{
	fndData = data;
     d0c:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <fndData+0x1>
     d10:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <fndData>
     d14:	08 95       	ret

00000d16 <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
     d16:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <fndData>
     d1a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <fndData+0x1>
     d1e:	00 cf       	rjmp	.-512    	; 0xb20 <FND_dispNum>
     d20:	08 95       	ret

00000d22 <FND_colonOn>:
}

void FND_colonOn(){
	fndColonFlag = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <fndColonFlag>
     d28:	08 95       	ret

00000d2a <FND_colonOff>:
}
void FND_colonOff(){
	fndColonFlag = 0;
     d2a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <fndColonFlag>
     d2e:	08 95       	ret

00000d30 <LCD_I2C_sendToI2C>:
}

void LCD_I2C_writeStringXY(uint8_t row, uint8_t col, char* str){
	LCD_I2C_gotoXY(row, col);
	LCD_I2C_writeString(str);
}
     d30:	47 c2       	rjmp	.+1166   	; 0x11c0 <I2C_txByte>
     d32:	08 95       	ret

00000d34 <LCD_I2C_backLightOn>:
     d34:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <lcdControlData>
     d38:	68 60       	ori	r22, 0x08	; 8
     d3a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcdControlData>
     d3e:	8e e4       	ldi	r24, 0x4E	; 78
     d40:	f7 cf       	rjmp	.-18     	; 0xd30 <LCD_I2C_sendToI2C>
     d42:	08 95       	ret

00000d44 <LCD_I2C_cmdMode>:
     d44:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <lcdControlData>
     d48:	6e 7f       	andi	r22, 0xFE	; 254
     d4a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcdControlData>
     d4e:	8e e4       	ldi	r24, 0x4E	; 78
     d50:	ef cf       	rjmp	.-34     	; 0xd30 <LCD_I2C_sendToI2C>
     d52:	08 95       	ret

00000d54 <LCD_I2C_charMode>:
     d54:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <lcdControlData>
     d58:	61 60       	ori	r22, 0x01	; 1
     d5a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcdControlData>
     d5e:	8e e4       	ldi	r24, 0x4E	; 78
     d60:	e7 cf       	rjmp	.-50     	; 0xd30 <LCD_I2C_sendToI2C>
     d62:	08 95       	ret

00000d64 <LCD_I2C_writeMode>:
     d64:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <lcdControlData>
     d68:	6d 7f       	andi	r22, 0xFD	; 253
     d6a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcdControlData>
     d6e:	8e e4       	ldi	r24, 0x4E	; 78
     d70:	df cf       	rjmp	.-66     	; 0xd30 <LCD_I2C_sendToI2C>
     d72:	08 95       	ret

00000d74 <LCD_I2C_enableHigh>:
     d74:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <lcdControlData>
     d78:	64 60       	ori	r22, 0x04	; 4
     d7a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcdControlData>
     d7e:	8e e4       	ldi	r24, 0x4E	; 78
     d80:	d7 df       	rcall	.-82     	; 0xd30 <LCD_I2C_sendToI2C>
     d82:	8f e9       	ldi	r24, 0x9F	; 159
     d84:	9f e0       	ldi	r25, 0x0F	; 15
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <LCD_I2C_enableHigh+0x12>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <LCD_I2C_enableHigh+0x18>
     d8c:	00 00       	nop
     d8e:	08 95       	ret

00000d90 <LCD_I2C_enableLow>:
     d90:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <lcdControlData>
     d94:	6b 7f       	andi	r22, 0xFB	; 251
     d96:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcdControlData>
     d9a:	8e e4       	ldi	r24, 0x4E	; 78
     d9c:	c9 df       	rcall	.-110    	; 0xd30 <LCD_I2C_sendToI2C>
     d9e:	8f e9       	ldi	r24, 0x9F	; 159
     da0:	9f e0       	ldi	r25, 0x0F	; 15
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <LCD_I2C_enableLow+0x12>
     da6:	00 c0       	rjmp	.+0      	; 0xda8 <LCD_I2C_enableLow+0x18>
     da8:	00 00       	nop
     daa:	08 95       	ret

00000dac <LCD_I2C_writeNibble>:
     dac:	cf 93       	push	r28
     dae:	c8 2f       	mov	r28, r24
     db0:	e1 df       	rcall	.-62     	; 0xd74 <LCD_I2C_enableHigh>
     db2:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <lcdControlData>
     db6:	6f 70       	andi	r22, 0x0F	; 15
     db8:	c0 7f       	andi	r28, 0xF0	; 240
     dba:	6c 2b       	or	r22, r28
     dbc:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcdControlData>
     dc0:	8e e4       	ldi	r24, 0x4E	; 78
     dc2:	b6 df       	rcall	.-148    	; 0xd30 <LCD_I2C_sendToI2C>
     dc4:	e5 df       	rcall	.-54     	; 0xd90 <LCD_I2C_enableLow>
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <LCD_I2C_writeByte>:
     dca:	cf 93       	push	r28
     dcc:	c8 2f       	mov	r28, r24
     dce:	ee df       	rcall	.-36     	; 0xdac <LCD_I2C_writeNibble>
     dd0:	8c 2f       	mov	r24, r28
     dd2:	82 95       	swap	r24
     dd4:	80 7f       	andi	r24, 0xF0	; 240
     dd6:	ea df       	rcall	.-44     	; 0xdac <LCD_I2C_writeNibble>
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <LCD_I2C_writeCmdData>:
     ddc:	cf 93       	push	r28
     dde:	c8 2f       	mov	r28, r24
     de0:	b1 df       	rcall	.-158    	; 0xd44 <LCD_I2C_cmdMode>
     de2:	c0 df       	rcall	.-128    	; 0xd64 <LCD_I2C_writeMode>
     de4:	c7 df       	rcall	.-114    	; 0xd74 <LCD_I2C_enableHigh>
     de6:	8c 2f       	mov	r24, r28
     de8:	f0 df       	rcall	.-32     	; 0xdca <LCD_I2C_writeByte>
     dea:	d2 df       	rcall	.-92     	; 0xd90 <LCD_I2C_enableLow>
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <LCD_I2C_init>:
     df0:	be d1       	rcall	.+892    	; 0x116e <I2C_init>
     df2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <lcdControlData>
     df6:	8f e5       	ldi	r24, 0x5F	; 95
     df8:	9a ee       	ldi	r25, 0xEA	; 234
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <LCD_I2C_init+0xa>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <LCD_I2C_init+0x10>
     e00:	00 00       	nop
     e02:	a0 df       	rcall	.-192    	; 0xd44 <LCD_I2C_cmdMode>
     e04:	af df       	rcall	.-162    	; 0xd64 <LCD_I2C_writeMode>
     e06:	80 e3       	ldi	r24, 0x30	; 48
     e08:	d1 df       	rcall	.-94     	; 0xdac <LCD_I2C_writeNibble>
     e0a:	8f e1       	ldi	r24, 0x1F	; 31
     e0c:	9e e4       	ldi	r25, 0x4E	; 78
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <LCD_I2C_init+0x1e>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <LCD_I2C_init+0x24>
     e14:	00 00       	nop
     e16:	80 e3       	ldi	r24, 0x30	; 48
     e18:	c9 df       	rcall	.-110    	; 0xdac <LCD_I2C_writeNibble>
     e1a:	8f e9       	ldi	r24, 0x9F	; 159
     e1c:	9f e0       	ldi	r25, 0x0F	; 15
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <LCD_I2C_init+0x2e>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <LCD_I2C_init+0x34>
     e24:	00 00       	nop
     e26:	80 e3       	ldi	r24, 0x30	; 48
     e28:	c1 df       	rcall	.-126    	; 0xdac <LCD_I2C_writeNibble>
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	bf df       	rcall	.-130    	; 0xdac <LCD_I2C_writeNibble>
     e2e:	88 e2       	ldi	r24, 0x28	; 40
     e30:	d5 df       	rcall	.-86     	; 0xddc <LCD_I2C_writeCmdData>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	d3 df       	rcall	.-90     	; 0xddc <LCD_I2C_writeCmdData>
     e36:	86 e0       	ldi	r24, 0x06	; 6
     e38:	d1 df       	rcall	.-94     	; 0xddc <LCD_I2C_writeCmdData>
     e3a:	8c e0       	ldi	r24, 0x0C	; 12
     e3c:	cf df       	rcall	.-98     	; 0xddc <LCD_I2C_writeCmdData>
     e3e:	7a cf       	rjmp	.-268    	; 0xd34 <LCD_I2C_backLightOn>
     e40:	08 95       	ret

00000e42 <LCD_I2C_writeCharData>:
     e42:	cf 93       	push	r28
     e44:	c8 2f       	mov	r28, r24
     e46:	86 df       	rcall	.-244    	; 0xd54 <LCD_I2C_charMode>
     e48:	8d df       	rcall	.-230    	; 0xd64 <LCD_I2C_writeMode>
     e4a:	94 df       	rcall	.-216    	; 0xd74 <LCD_I2C_enableHigh>
     e4c:	8c 2f       	mov	r24, r28
     e4e:	bd df       	rcall	.-134    	; 0xdca <LCD_I2C_writeByte>
     e50:	9f df       	rcall	.-194    	; 0xd90 <LCD_I2C_enableLow>
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <LCD_I2C_gotoXY>:
     e56:	6f 70       	andi	r22, 0x0F	; 15
     e58:	81 70       	andi	r24, 0x01	; 1
     e5a:	90 e4       	ldi	r25, 0x40	; 64
     e5c:	89 9f       	mul	r24, r25
     e5e:	60 0d       	add	r22, r0
     e60:	11 24       	eor	r1, r1
     e62:	86 2f       	mov	r24, r22
     e64:	80 58       	subi	r24, 0x80	; 128
     e66:	ba cf       	rjmp	.-140    	; 0xddc <LCD_I2C_writeCmdData>
     e68:	08 95       	ret

00000e6a <LCD_I2C_clearDisplay>:

void LCD_I2C_clearDisplay(){
	LCD_I2C_writeCmdData(Display_I2C_Clear);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	b7 cf       	rjmp	.-146    	; 0xddc <LCD_I2C_writeCmdData>
     e6e:	08 95       	ret

00000e70 <LCD_Gauge_Low>:
}

void LCD_Gauge_Low()
{
	LCD_I2C_writeCharData(0xff);
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	e7 df       	rcall	.-50     	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,0);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	ee df       	rcall	.-36     	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	e2 df       	rcall	.-60     	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,1);
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	e9 df       	rcall	.-46     	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	dd df       	rcall	.-70     	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,2);
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	e4 df       	rcall	.-56     	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	d8 df       	rcall	.-80     	; 0xe42 <LCD_I2C_writeCharData>
     e92:	63 e0       	ldi	r22, 0x03	; 3
	LCD_I2C_gotoXY(0,3);
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	df cf       	rjmp	.-66     	; 0xe56 <LCD_I2C_gotoXY>
     e98:	08 95       	ret

00000e9a <LCD_Gauge_middle>:
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	d2 df       	rcall	.-92     	; 0xe42 <LCD_I2C_writeCharData>


void LCD_Gauge_middle()
{
	LCD_I2C_writeCharData(0xff);
	LCD_I2C_gotoXY(0,0);
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	d9 df       	rcall	.-78     	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	cd df       	rcall	.-102    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,1);
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	d4 df       	rcall	.-88     	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	c8 df       	rcall	.-112    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,2);
     eb2:	62 e0       	ldi	r22, 0x02	; 2
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	cf df       	rcall	.-98     	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	c3 df       	rcall	.-122    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,3);
     ebc:	63 e0       	ldi	r22, 0x03	; 3
     ebe:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     ec0:	ca df       	rcall	.-108    	; 0xe56 <LCD_I2C_gotoXY>
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_gotoXY(0,4);
     ec4:	be df       	rcall	.-132    	; 0xe42 <LCD_I2C_writeCharData>
     ec6:	64 e0       	ldi	r22, 0x04	; 4
     ec8:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     eca:	c5 df       	rcall	.-118    	; 0xe56 <LCD_I2C_gotoXY>
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_gotoXY(0,5);
     ece:	b9 df       	rcall	.-142    	; 0xe42 <LCD_I2C_writeCharData>
     ed0:	65 e0       	ldi	r22, 0x05	; 5
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	c0 df       	rcall	.-128    	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	b4 df       	rcall	.-152    	; 0xe42 <LCD_I2C_writeCharData>
     eda:	66 e0       	ldi	r22, 0x06	; 6
	LCD_I2C_gotoXY(0,6);
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	bb df       	rcall	.-138    	; 0xe56 <LCD_I2C_gotoXY>
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	af cf       	rjmp	.-162    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_writeCharData(0xff);
     ee4:	08 95       	ret

00000ee6 <LCD_Gauge_high>:
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	ac df       	rcall	.-168    	; 0xe42 <LCD_I2C_writeCharData>
     eea:	60 e0       	ldi	r22, 0x00	; 0
}
void LCD_Gauge_high()
{
	LCD_I2C_writeCharData(0xff);
	LCD_I2C_gotoXY(0,0);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	b3 df       	rcall	.-154    	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	a7 df       	rcall	.-178    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,1);
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	ae df       	rcall	.-164    	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	a2 df       	rcall	.-188    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,2);
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	a9 df       	rcall	.-174    	; 0xe56 <LCD_I2C_gotoXY>
	LCD_I2C_writeCharData(0xff);
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	9d df       	rcall	.-198    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,3);
     f08:	63 e0       	ldi	r22, 0x03	; 3
     f0a:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     f0c:	a4 df       	rcall	.-184    	; 0xe56 <LCD_I2C_gotoXY>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_gotoXY(0,4);
     f10:	98 df       	rcall	.-208    	; 0xe42 <LCD_I2C_writeCharData>
     f12:	64 e0       	ldi	r22, 0x04	; 4
     f14:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     f16:	9f df       	rcall	.-194    	; 0xe56 <LCD_I2C_gotoXY>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_gotoXY(0,5);
     f1a:	93 df       	rcall	.-218    	; 0xe42 <LCD_I2C_writeCharData>
     f1c:	65 e0       	ldi	r22, 0x05	; 5
     f1e:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     f20:	9a df       	rcall	.-204    	; 0xe56 <LCD_I2C_gotoXY>
     f22:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_gotoXY(0,6);
     f24:	8e df       	rcall	.-228    	; 0xe42 <LCD_I2C_writeCharData>
     f26:	66 e0       	ldi	r22, 0x06	; 6
     f28:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     f2a:	95 df       	rcall	.-214    	; 0xe56 <LCD_I2C_gotoXY>
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_gotoXY(0,7);
     f2e:	89 df       	rcall	.-238    	; 0xe42 <LCD_I2C_writeCharData>
     f30:	67 e0       	ldi	r22, 0x07	; 7
     f32:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     f34:	90 df       	rcall	.-224    	; 0xe56 <LCD_I2C_gotoXY>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_gotoXY(0,8);
     f38:	84 df       	rcall	.-248    	; 0xe42 <LCD_I2C_writeCharData>
     f3a:	68 e0       	ldi	r22, 0x08	; 8
     f3c:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_writeCharData(0xff);
     f3e:	8b df       	rcall	.-234    	; 0xe56 <LCD_I2C_gotoXY>
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	7f df       	rcall	.-258    	; 0xe42 <LCD_I2C_writeCharData>
	LCD_I2C_gotoXY(0,9);
     f44:	69 e0       	ldi	r22, 0x09	; 9
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	86 df       	rcall	.-244    	; 0xe56 <LCD_I2C_gotoXY>
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_I2C_writeCharData(0xff);
     f4c:	7a df       	rcall	.-268    	; 0xe42 <LCD_I2C_writeCharData>
     f4e:	6a e0       	ldi	r22, 0x0A	; 10
     f50:	80 e0       	ldi	r24, 0x00	; 0
	LCD_I2C_gotoXY(0,10);
     f52:	81 df       	rcall	.-254    	; 0xe56 <LCD_I2C_gotoXY>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	75 df       	rcall	.-278    	; 0xe42 <LCD_I2C_writeCharData>
     f58:	6b e0       	ldi	r22, 0x0B	; 11
	LCD_I2C_writeCharData(0xff);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	7c cf       	rjmp	.-264    	; 0xe56 <LCD_I2C_gotoXY>
     f5e:	08 95       	ret

00000f60 <Gpio_init>:
	LCD_I2C_gotoXY(0,11);
     f60:	44 e0       	ldi	r20, 0x04	; 4
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	87 e3       	ldi	r24, 0x37	; 55
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	c0 d0       	rcall	.+384    	; 0x10ea <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR, OUTPUT, LCD_ENABLE);
	Gpio_initPort(&LCD_DATA_DDR, OUTPUT);
}

void LCD_Off(){
	Gpio_writePort(&LCD_CONTROL_PORT, 0x00);
     f6a:	46 e0       	ldi	r20, 0x06	; 6
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	87 e3       	ldi	r24, 0x37	; 55
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	bb d0       	rcall	.+374    	; 0x10ea <Gpio_initPin>
     f74:	47 e0       	ldi	r20, 0x07	; 7
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	87 e3       	ldi	r24, 0x37	; 55
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	b6 d0       	rcall	.+364    	; 0x10ea <Gpio_initPin>
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	84 e3       	ldi	r24, 0x34	; 52
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a9 c0       	rjmp	.+338    	; 0x10d8 <Gpio_initPort>
     f86:	08 95       	ret

00000f88 <LCD_cmdMode>:
}
void LCD_cmdMode(){
	//RS pin : bit 0
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_RS, GPIO_PIN_RESET);
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	64 e0       	ldi	r22, 0x04	; 4
     f8c:	88 e3       	ldi	r24, 0x38	; 56
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	ca c0       	rjmp	.+404    	; 0x1126 <Gpio_writePin>
     f92:	08 95       	ret

00000f94 <LCD_charMode>:
}

void LCD_charMode(){
	//RS pin : bit 1
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_RS, GPIO_PIN_SET);
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	88 e3       	ldi	r24, 0x38	; 56
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	c4 c0       	rjmp	.+392    	; 0x1126 <Gpio_writePin>
     f9e:	08 95       	ret

00000fa0 <LCD_writeMode>:
}

void LCD_writeMode(){
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_RW, GPIO_PIN_RESET);
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	66 e0       	ldi	r22, 0x06	; 6
     fa4:	88 e3       	ldi	r24, 0x38	; 56
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	be c0       	rjmp	.+380    	; 0x1126 <Gpio_writePin>
     faa:	08 95       	ret

00000fac <LCD_enableHigh>:
}

void LCD_enableHigh(){
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_ENABLE, GPIO_PIN_SET);
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	67 e0       	ldi	r22, 0x07	; 7
     fb0:	88 e3       	ldi	r24, 0x38	; 56
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	b8 d0       	rcall	.+368    	; 0x1126 <Gpio_writePin>
     fb6:	8f e9       	ldi	r24, 0x9F	; 159
     fb8:	9f e0       	ldi	r25, 0x0F	; 15
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <LCD_enableHigh+0xe>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <LCD_enableHigh+0x14>
     fc0:	00 00       	nop
     fc2:	08 95       	ret

00000fc4 <LCD_enableLow>:
	_delay_ms(1);
}

void LCD_enableLow(){
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_ENABLE, GPIO_PIN_RESET);
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	67 e0       	ldi	r22, 0x07	; 7
     fc8:	88 e3       	ldi	r24, 0x38	; 56
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	ac d0       	rcall	.+344    	; 0x1126 <Gpio_writePin>
     fce:	8f e9       	ldi	r24, 0x9F	; 159
     fd0:	9f e0       	ldi	r25, 0x0F	; 15
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <LCD_enableLow+0xe>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <LCD_enableLow+0x14>
     fd8:	00 00       	nop
     fda:	08 95       	ret

00000fdc <LCD_writeByte>:
	_delay_ms(1);
}

void LCD_writeByte(uint8_t data){
	Gpio_writePort(&LCD_DATA_PORT, data);
     fdc:	68 2f       	mov	r22, r24
     fde:	85 e3       	ldi	r24, 0x35	; 53
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9e c0       	rjmp	.+316    	; 0x1120 <Gpio_writePort>
     fe4:	08 95       	ret

00000fe6 <LCD_writeCmdData>:
}
// MCU -> LCD ëªë ¹ì´ë¥¼ ë³´ë¼ ê²½ì° (write mode)

void LCD_writeCmdData(uint8_t data){
     fe6:	cf 93       	push	r28
     fe8:	c8 2f       	mov	r28, r24
	// LCD ëªë ¹ì´ ì ë¬
	LCD_cmdMode();
     fea:	ce df       	rcall	.-100    	; 0xf88 <LCD_cmdMode>
	LCD_writeMode();
     fec:	d9 df       	rcall	.-78     	; 0xfa0 <LCD_writeMode>
	LCD_enableHigh();
     fee:	de df       	rcall	.-68     	; 0xfac <LCD_enableHigh>
	LCD_writeByte(data);
     ff0:	8c 2f       	mov	r24, r28
     ff2:	f4 df       	rcall	.-24     	; 0xfdc <LCD_writeByte>
     ff4:	e7 df       	rcall	.-50     	; 0xfc4 <LCD_enableLow>
	LCD_enableLow();
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <LCD_init>:
}
     ffa:	b2 df       	rcall	.-156    	; 0xf60 <Gpio_init>
     ffc:	8f e5       	ldi	r24, 0x5F	; 95
     ffe:	9a ee       	ldi	r25, 0xEA	; 234
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <__DATA_REGION_LENGTH__>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
    1006:	00 00       	nop
ï»¿#include "LCD.h"

void LCD_init(){
	Gpio_init();
	_delay_ms(15);
	LCD_writeCmdData(Function_set);	//Function set 0x38
    1008:	88 e3       	ldi	r24, 0x38	; 56
    100a:	ed df       	rcall	.-38     	; 0xfe6 <LCD_writeCmdData>
    100c:	8f e1       	ldi	r24, 0x1F	; 31
    100e:	9e e4       	ldi	r25, 0x4E	; 78
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
	_delay_ms(5);
	LCD_writeCmdData(Function_set);	//Function set 0x38
    1016:	00 00       	nop
    1018:	88 e3       	ldi	r24, 0x38	; 56
    101a:	e5 df       	rcall	.-54     	; 0xfe6 <LCD_writeCmdData>
    101c:	8f e9       	ldi	r24, 0x9F	; 159
    101e:	9f e0       	ldi	r25, 0x0F	; 15
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
	_delay_ms(1);
	LCD_writeCmdData(Function_set);	//Function set 0x38
    1026:	00 00       	nop
    1028:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(Function_set);	//Function set 0x38
    102a:	dd df       	rcall	.-70     	; 0xfe6 <LCD_writeCmdData>
    102c:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(Display_Off);	//Display Off
    102e:	db df       	rcall	.-74     	; 0xfe6 <LCD_writeCmdData>
    1030:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(Display_Clear);	//Display Clear
    1032:	d9 df       	rcall	.-78     	; 0xfe6 <LCD_writeCmdData>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	d7 df       	rcall	.-82     	; 0xfe6 <LCD_writeCmdData>
	LCD_writeCmdData(Entry_Mode_Set);	//Entry Mode Set
    1038:	86 e0       	ldi	r24, 0x06	; 6
    103a:	d5 df       	rcall	.-86     	; 0xfe6 <LCD_writeCmdData>
    103c:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(Display_On);	//Display On -> ì ê³¼ì ê¹ì§ ì´ê¸°í, ë§ì§ë§ì ì¼ì¤ì¼ë¨
    103e:	d3 cf       	rjmp	.-90     	; 0xfe6 <LCD_writeCmdData>
    1040:	08 95       	ret

00001042 <LCD_writeCharData>:
    1042:	cf 93       	push	r28
    1044:	c8 2f       	mov	r28, r24

// MCU -> LCD Dataë¥¼ ë³´ë¼ ê²½ì° (write mode)

void LCD_writeCharData(uint8_t data){
	// LCD char ì°ê¸° ì ë¬
	LCD_charMode();
    1046:	a6 df       	rcall	.-180    	; 0xf94 <LCD_charMode>
	LCD_writeMode();
    1048:	ab df       	rcall	.-170    	; 0xfa0 <LCD_writeMode>
	LCD_enableHigh();
    104a:	b0 df       	rcall	.-160    	; 0xfac <LCD_enableHigh>
	LCD_writeByte(data);
    104c:	8c 2f       	mov	r24, r28
    104e:	c6 df       	rcall	.-116    	; 0xfdc <LCD_writeByte>
    1050:	b9 df       	rcall	.-142    	; 0xfc4 <LCD_enableLow>
	LCD_enableLow();
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <LCD_writeString>:
}
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17

void LCD_writeString(char *str){
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	8c 01       	movw	r16, r24
	for(int i = 0; str[i]; i++){
    1060:	c0 e0       	ldi	r28, 0x00	; 0
    1062:	d0 e0       	ldi	r29, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <LCD_writeString+0x14>
		LCD_writeCharData(str[i]);
    1066:	ed df       	rcall	.-38     	; 0x1042 <LCD_writeCharData>
	LCD_writeByte(data);
	LCD_enableLow();
}

void LCD_writeString(char *str){
	for(int i = 0; str[i]; i++){
    1068:	21 96       	adiw	r28, 0x01	; 1
    106a:	f8 01       	movw	r30, r16
    106c:	ec 0f       	add	r30, r28
    106e:	fd 1f       	adc	r31, r29
    1070:	80 81       	ld	r24, Z
    1072:	81 11       	cpse	r24, r1
    1074:	f8 cf       	rjmp	.-16     	; 0x1066 <LCD_writeString+0x10>
		LCD_writeCharData(str[i]);
	}
}
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
	col %= 16; row %= 2;
    1080:	6f 70       	andi	r22, 0x0F	; 15
    1082:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row) + col;
    1084:	90 e4       	ldi	r25, 0x40	; 64
    1086:	89 9f       	mul	r24, r25
    1088:	60 0d       	add	r22, r0
    108a:	11 24       	eor	r1, r1
    108c:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
    108e:	80 58       	subi	r24, 0x80	; 128
    1090:	aa cf       	rjmp	.-172    	; 0xfe6 <LCD_writeCmdData>
    1092:	08 95       	ret

00001094 <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, char* str){
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ea 01       	movw	r28, r20
	LCD_gotoXY(row, col);
    109a:	f2 df       	rcall	.-28     	; 0x1080 <LCD_gotoXY>
	LCD_writeString(str);
    109c:	ce 01       	movw	r24, r28
    109e:	db df       	rcall	.-74     	; 0x1056 <LCD_writeString>
}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <main>:
#include "Driver/Fan/Fan.h"
#include "Periph/TIM/TIM.h"

int main(void)
{
	apMain_init();
    10a6:	8a d8       	rcall	.-3820   	; 0x1bc <apMain_init>
	while (1)
	{
		apMain_execute();
    10a8:	9a d8       	rcall	.-3788   	; 0x1de <apMain_execute>
    10aa:	fe cf       	rjmp	.-4      	; 0x10a8 <main+0x2>

000010ac <Model_getFanStateData>:

uint8_t FanState;

uint8_t Model_getFanStateData(){
	return FanState;
}
    10ac:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <FanState>
    10b0:	08 95       	ret

000010b2 <Model_setFanStateData>:

void Model_setFanStateData(uint8_t state){
	FanState = state;
    10b2:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <FanState>
    10b6:	08 95       	ret

000010b8 <Model_getTimerStateData>:
uint8_t TimerState;
uint8_t* TimerUartState;

uint8_t Model_getTimerStateData(){
	return TimerState;
}
    10b8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TimerState>
    10bc:	08 95       	ret

000010be <Model_setTimerStateData>:

void Model_setTimerStateData(uint8_t state){
	TimerState = state;
    10be:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <TimerState>
    10c2:	08 95       	ret

000010c4 <Model_getTimerUartStateData>:
}

uint8_t* Model_getTimerUartStateData(){
	return TimerUartState;
}
    10c4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TimerUartState>
    10c8:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TimerUartState+0x1>
    10cc:	08 95       	ret

000010ce <Model_setTimerUartStateData>:

void Model_setTimerUartStateData(uint8_t* state){
	TimerUartState = state;
    10ce:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <TimerUartState+0x1>
    10d2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <TimerUartState>
    10d6:	08 95       	ret

000010d8 <Gpio_initPort>:
}

uint8_t Gpio_readPort(volatile uint8_t* PIN){
	//ë¬´ì¨ ë³ì = PINA
	return *PIN;
}
    10d8:	61 11       	cpse	r22, r1
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <Gpio_initPort+0xc>
    10dc:	2f ef       	ldi	r18, 0xFF	; 255
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
    10e2:	08 95       	ret
    10e4:	fc 01       	movw	r30, r24
    10e6:	10 82       	st	Z, r1
    10e8:	08 95       	ret

000010ea <Gpio_initPin>:
    10ea:	61 11       	cpse	r22, r1
    10ec:	0c c0       	rjmp	.+24     	; 0x1106 <__stack+0x7>
    10ee:	fc 01       	movw	r30, r24
    10f0:	50 81       	ld	r21, Z
    10f2:	21 e0       	ldi	r18, 0x01	; 1
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <Gpio_initPin+0x12>
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	4a 95       	dec	r20
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <Gpio_initPin+0xe>
    1100:	25 2b       	or	r18, r21
    1102:	20 83       	st	Z, r18
    1104:	08 95       	ret
    1106:	fc 01       	movw	r30, r24
    1108:	50 81       	ld	r21, Z
    110a:	21 e0       	ldi	r18, 0x01	; 1
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <__stack+0x15>
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	4a 95       	dec	r20
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <__stack+0x11>
    1118:	20 95       	com	r18
    111a:	25 23       	and	r18, r21
    111c:	20 83       	st	Z, r18
    111e:	08 95       	ret

00001120 <Gpio_writePort>:
    1120:	fc 01       	movw	r30, r24
    1122:	60 83       	st	Z, r22
    1124:	08 95       	ret

00001126 <Gpio_writePin>:
    1126:	fc 01       	movw	r30, r24
    1128:	41 30       	cpi	r20, 0x01	; 1
    112a:	59 f4       	brne	.+22     	; 0x1142 <Gpio_writePin+0x1c>
    112c:	20 81       	ld	r18, Z
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <Gpio_writePin+0x12>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	6a 95       	dec	r22
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <Gpio_writePin+0xe>
    113c:	82 2b       	or	r24, r18
    113e:	80 83       	st	Z, r24
    1140:	08 95       	ret
    1142:	90 81       	ld	r25, Z
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <Gpio_writePin+0x28>
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	6a 95       	dec	r22
    1150:	e2 f7       	brpl	.-8      	; 0x114a <Gpio_writePin+0x24>
    1152:	20 95       	com	r18
    1154:	29 23       	and	r18, r25
    1156:	20 83       	st	Z, r18
    1158:	08 95       	ret

0000115a <Gpio_readPin>:

uint8_t Gpio_readPin(volatile uint8_t* PIN, uint8_t pinNum){
	// PINA & (1<<0);
	// íìì í­ ê¸°ì¤, ìë ¥ ë°ì¼ë©´ 0ì´ê¸°ì ëë ¤ì¡ì ë 0ì´ ë¦¬í´ëì´ì¼ í¨
	return ((*PIN & (1<<pinNum)) != 0);		//ëë¦¬ë©´(0) í´ë¹ê°ì´ ê±°ì§ì´ë¯ë¡ 0ë¦¬í´
    115a:	fc 01       	movw	r30, r24
    115c:	80 81       	ld	r24, Z
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <Gpio_readPin+0xc>
    1162:	95 95       	asr	r25
    1164:	87 95       	ror	r24
    1166:	6a 95       	dec	r22
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <Gpio_readPin+0x8>
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	08 95       	ret

0000116e <I2C_init>:
#define I2C_DDR			DDRD
#define I2C_SCL			0
#define I2C_SDA			1

void I2C_init(){
	I2C_DDR |= ((1<<I2C_SCL) | (1<<I2C_SDA));
    116e:	81 b3       	in	r24, 0x11	; 17
    1170:	83 60       	ori	r24, 0x03	; 3
    1172:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; //100khz SCL
    1174:	88 e4       	ldi	r24, 0x48	; 72
    1176:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	//TWBR = 32; //200khz SCL
	//TWBR = 12; //400khz SCL
	TWSR = 0;
    117a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    117e:	08 95       	ret

00001180 <I2C_start>:
	I2C_stop();
}

void I2C_start(){
	// Send START condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1180:	84 ea       	ldi	r24, 0xA4	; 164
    1182:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	// Wait for TWINT flag set. This indicates that the
	// START condition has been transmitted
	while (!(TWCR & (1<<TWINT)));
    1186:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    118a:	88 23       	and	r24, r24
    118c:	e4 f7       	brge	.-8      	; 0x1186 <I2C_start+0x6>
}
    118e:	08 95       	ret

00001190 <I2C_txDevAddr>:

void I2C_txDevAddr(uint8_t SLA_W){
	//Load SLA_W into TWDR Register.
	//Clear TWINT bit in TWCR to start transmission of address
	TWDR = SLA_W;
    1190:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1194:	84 e8       	ldi	r24, 0x84	; 132
    1196:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	//Wait for TWINT flag set. This indicates that the
	//SLA+W has been transmitted, and
	//ACK/NACK has been received.
	while (!(TWCR & (1<<TWINT)));
    119a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    119e:	88 23       	and	r24, r24
    11a0:	e4 f7       	brge	.-8      	; 0x119a <I2C_txDevAddr+0xa>
}
    11a2:	08 95       	ret

000011a4 <I2C_txData>:

void I2C_txData(uint8_t data){
	//Load DATA into TWDR Register. Clear TWINT
	//bit in TWCR to start transmission of data
	TWDR = data;
    11a4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
    11a8:	84 e8       	ldi	r24, 0x84	; 132
    11aa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
    11ae:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    11b2:	88 23       	and	r24, r24
    11b4:	e4 f7       	brge	.-8      	; 0x11ae <I2C_txData+0xa>
}
    11b6:	08 95       	ret

000011b8 <I2C_stop>:

void I2C_stop(){
	//Transmit STOP condition
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    11b8:	84 e9       	ldi	r24, 0x94	; 148
    11ba:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    11be:	08 95       	ret

000011c0 <I2C_txByte>:
	//TWBR = 32; //200khz SCL
	//TWBR = 12; //400khz SCL
	TWSR = 0;
}

void I2C_txByte(uint8_t SLA_W, uint8_t data){
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	d8 2f       	mov	r29, r24
    11c6:	c6 2f       	mov	r28, r22
	//1byte data ì¡ìì íë ìí© (AVR(Master)-> Other Device(Slave))
	// 1. Start bit ì¡ì  (M->S)
	I2C_start();
    11c8:	db df       	rcall	.-74     	; 0x1180 <I2C_start>
	// 2. SLA + W ì¡ì  (M->S)
	I2C_txDevAddr(SLA_W);
    11ca:	8d 2f       	mov	r24, r29
    11cc:	e1 df       	rcall	.-62     	; 0x1190 <I2C_txDevAddr>
	// 3. ACK ìì  (S->M)
	// 4. 1byte Data ì¡ì  (M->S)
	I2C_txData(data);
    11ce:	8c 2f       	mov	r24, r28
    11d0:	e9 df       	rcall	.-46     	; 0x11a4 <I2C_txData>
	// 5. ACK ìì  (S->M)
	// 6. Stop bit ì¡ì  (M->S)
	I2C_stop();
    11d2:	f2 df       	rcall	.-28     	; 0x11b8 <I2C_stop>
    11d4:	df 91       	pop	r29
}
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <TIM0_init>:
ï»¿#include "TIM.h"

void TIM0_init() // 1ms overflow Interrupt, FND Display
{
	// 128 1ms interrupt
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00));	// 128 PreScaler
    11da:	83 b7       	in	r24, 0x33	; 51
    11dc:	85 60       	ori	r24, 0x05	; 5
    11de:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);							//TIMSK Timer/Counter0 overflow ì¤ì 
    11e0:	87 b7       	in	r24, 0x37	; 55
    11e2:	81 60       	ori	r24, 0x01	; 1
    11e4:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 130;
    11e6:	82 e8       	ldi	r24, 0x82	; 130
    11e8:	82 bf       	out	0x32, r24	; 50
    11ea:	08 95       	ret

000011ec <TIM1_init>:
}

void TIM1_init(){
	TCCR1B |= ((0<<CS12) | (1<<CS11) | (1<<CS10));
    11ec:	8e b5       	in	r24, 0x2e	; 46
    11ee:	83 60       	ori	r24, 0x03	; 3
    11f0:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ((1<<WGM13) | (1<<WGM12));
    11f2:	8e b5       	in	r24, 0x2e	; 46
    11f4:	88 61       	ori	r24, 0x18	; 24
    11f6:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ((1<<WGM11) | (0<<WGM10));
    11f8:	8f b5       	in	r24, 0x2f	; 47
    11fa:	82 60       	ori	r24, 0x02	; 2
    11fc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));
    11fe:	8f b5       	in	r24, 0x2f	; 47
    1200:	8f 73       	andi	r24, 0x3F	; 63
    1202:	8f bd       	out	0x2f, r24	; 47
    1204:	08 95       	ret

00001206 <TIM2_init>:
}

void TIM2_init(){
	//TCCR2, 1/64 1ms period interrupt, CTC mode
	//1/64 prescaler
	TCCR2 |= ((0<<CS22) | (1<<CS21) | (1<<CS20));
    1206:	85 b5       	in	r24, 0x25	; 37
    1208:	83 60       	ori	r24, 0x03	; 3
    120a:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);
    120c:	87 b7       	in	r24, 0x37	; 55
    120e:	80 68       	ori	r24, 0x80	; 128
    1210:	87 bf       	out	0x37, r24	; 55
	//CTC mode
	TCCR2 |= ((1<<WGM21) | (0<<WGM20));
    1212:	85 b5       	in	r24, 0x25	; 37
    1214:	88 60       	ori	r24, 0x08	; 8
    1216:	85 bd       	out	0x25, r24	; 37
	OCR2 = 250-1;
    1218:	89 ef       	ldi	r24, 0xF9	; 249
    121a:	83 bd       	out	0x23, r24	; 35
    121c:	08 95       	ret

0000121e <TIM3_init>:
}

void TIM3_init(){
	TCCR3B |= ((0<<CS32) | (1<<CS31) | (1<<CS30));	// Prescaler -> 1/64
    121e:	ea e8       	ldi	r30, 0x8A	; 138
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	83 60       	ori	r24, 0x03	; 3
    1226:	80 83       	st	Z, r24
	TCCR3B |= ((1<<WGM33) | (1<<WGM32));
    1228:	80 81       	ld	r24, Z
    122a:	88 61       	ori	r24, 0x18	; 24
    122c:	80 83       	st	Z, r24
	TCCR3A |= ((1<<WGM31) | (0<<WGM30));			// Fast PWM Mode 14
    122e:	eb e8       	ldi	r30, 0x8B	; 139
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	82 60       	ori	r24, 0x02	; 2
    1236:	80 83       	st	Z, r24
	TCCR3A |= ((1<<COM3A1) | (0<<COM3A0));
    1238:	80 81       	ld	r24, Z
    123a:	80 68       	ori	r24, 0x80	; 128
    123c:	80 83       	st	Z, r24
    123e:	08 95       	ret

00001240 <UART0_init>:
void UART0_clearRxFlag(){
	uart0RxFlag = 0;
}

void UART0_setRxFlag(){
	uart0RxFlag = 1;
    1240:	8a b1       	in	r24, 0x0a	; 10
    1242:	88 61       	ori	r24, 0x18	; 24
    1244:	8a b9       	out	0x0a, r24	; 10
    1246:	8b b1       	in	r24, 0x0b	; 11
    1248:	82 60       	ori	r24, 0x02	; 2
    124a:	8b b9       	out	0x0b, r24	; 11
    124c:	8a b1       	in	r24, 0x0a	; 10
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	8a b9       	out	0x0a, r24	; 10
    1252:	8f ec       	ldi	r24, 0xCF	; 207
    1254:	89 b9       	out	0x09, r24	; 9
    1256:	08 95       	ret

00001258 <UART0_ISR_Process>:
    1258:	9c b1       	in	r25, 0x0c	; 12
    125a:	9a 30       	cpi	r25, 0x0A	; 10
    125c:	91 f4       	brne	.+36     	; 0x1282 <UART0_ISR_Process+0x2a>
    125e:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <uart0RxTail.1747>
    1262:	ae 2f       	mov	r26, r30
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	a9 53       	subi	r26, 0x39	; 57
    1268:	be 4f       	sbci	r27, 0xFE	; 254
    126a:	9c 93       	st	X, r25
    126c:	ef 5f       	subi	r30, 0xFF	; 255
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	e9 53       	subi	r30, 0x39	; 57
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	10 82       	st	Z, r1
    1276:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <uart0RxTail.1747>
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <uart0RxFlag>
    1280:	08 95       	ret
    1282:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <uart0RxTail.1747>
    1286:	e8 2f       	mov	r30, r24
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	e9 53       	subi	r30, 0x39	; 57
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	90 83       	st	Z, r25
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <uart0RxTail.1747>
    1296:	08 95       	ret

00001298 <UART0_clearRxFlag>:
    1298:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <uart0RxFlag>
    129c:	08 95       	ret

0000129e <UART0_getRxFlag>:
}

uint8_t UART0_getRxFlag(){
	return uart0RxFlag;
}
    129e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <uart0RxFlag>
    12a2:	08 95       	ret

000012a4 <UART0_readRxBuff>:


uint8_t* UART0_readRxBuff(){
	return uart0Rxbuff;
    12a4:	87 ec       	ldi	r24, 0xC7	; 199
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	08 95       	ret

000012aa <__udivmodhi4>:
    12aa:	aa 1b       	sub	r26, r26
    12ac:	bb 1b       	sub	r27, r27
    12ae:	51 e1       	ldi	r21, 0x11	; 17
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <__udivmodhi4_ep>

000012b2 <__udivmodhi4_loop>:
    12b2:	aa 1f       	adc	r26, r26
    12b4:	bb 1f       	adc	r27, r27
    12b6:	a6 17       	cp	r26, r22
    12b8:	b7 07       	cpc	r27, r23
    12ba:	10 f0       	brcs	.+4      	; 0x12c0 <__udivmodhi4_ep>
    12bc:	a6 1b       	sub	r26, r22
    12be:	b7 0b       	sbc	r27, r23

000012c0 <__udivmodhi4_ep>:
    12c0:	88 1f       	adc	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	5a 95       	dec	r21
    12c6:	a9 f7       	brne	.-22     	; 0x12b2 <__udivmodhi4_loop>
    12c8:	80 95       	com	r24
    12ca:	90 95       	com	r25
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	08 95       	ret

000012d2 <__divmodhi4>:
    12d2:	97 fb       	bst	r25, 7
    12d4:	07 2e       	mov	r0, r23
    12d6:	16 f4       	brtc	.+4      	; 0x12dc <__divmodhi4+0xa>
    12d8:	00 94       	com	r0
    12da:	06 d0       	rcall	.+12     	; 0x12e8 <__divmodhi4_neg1>
    12dc:	77 fd       	sbrc	r23, 7
    12de:	08 d0       	rcall	.+16     	; 0x12f0 <__divmodhi4_neg2>
    12e0:	e4 df       	rcall	.-56     	; 0x12aa <__udivmodhi4>
    12e2:	07 fc       	sbrc	r0, 7
    12e4:	05 d0       	rcall	.+10     	; 0x12f0 <__divmodhi4_neg2>
    12e6:	3e f4       	brtc	.+14     	; 0x12f6 <__divmodhi4_exit>

000012e8 <__divmodhi4_neg1>:
    12e8:	90 95       	com	r25
    12ea:	81 95       	neg	r24
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	08 95       	ret

000012f0 <__divmodhi4_neg2>:
    12f0:	70 95       	com	r23
    12f2:	61 95       	neg	r22
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255

000012f6 <__divmodhi4_exit>:
    12f6:	08 95       	ret

000012f8 <__divmodsi4>:
    12f8:	05 2e       	mov	r0, r21
    12fa:	97 fb       	bst	r25, 7
    12fc:	16 f4       	brtc	.+4      	; 0x1302 <__divmodsi4+0xa>
    12fe:	00 94       	com	r0
    1300:	0f d0       	rcall	.+30     	; 0x1320 <__negsi2>
    1302:	57 fd       	sbrc	r21, 7
    1304:	05 d0       	rcall	.+10     	; 0x1310 <__divmodsi4_neg2>
    1306:	23 d0       	rcall	.+70     	; 0x134e <__udivmodsi4>
    1308:	07 fc       	sbrc	r0, 7
    130a:	02 d0       	rcall	.+4      	; 0x1310 <__divmodsi4_neg2>
    130c:	46 f4       	brtc	.+16     	; 0x131e <__divmodsi4_exit>
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <__negsi2>

00001310 <__divmodsi4_neg2>:
    1310:	50 95       	com	r21
    1312:	40 95       	com	r20
    1314:	30 95       	com	r19
    1316:	21 95       	neg	r18
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	4f 4f       	sbci	r20, 0xFF	; 255
    131c:	5f 4f       	sbci	r21, 0xFF	; 255

0000131e <__divmodsi4_exit>:
    131e:	08 95       	ret

00001320 <__negsi2>:
    1320:	90 95       	com	r25
    1322:	80 95       	com	r24
    1324:	70 95       	com	r23
    1326:	61 95       	neg	r22
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	08 95       	ret

00001330 <__umulhisi3>:
    1330:	a2 9f       	mul	r26, r18
    1332:	b0 01       	movw	r22, r0
    1334:	b3 9f       	mul	r27, r19
    1336:	c0 01       	movw	r24, r0
    1338:	a3 9f       	mul	r26, r19
    133a:	70 0d       	add	r23, r0
    133c:	81 1d       	adc	r24, r1
    133e:	11 24       	eor	r1, r1
    1340:	91 1d       	adc	r25, r1
    1342:	b2 9f       	mul	r27, r18
    1344:	70 0d       	add	r23, r0
    1346:	81 1d       	adc	r24, r1
    1348:	11 24       	eor	r1, r1
    134a:	91 1d       	adc	r25, r1
    134c:	08 95       	ret

0000134e <__udivmodsi4>:
    134e:	a1 e2       	ldi	r26, 0x21	; 33
    1350:	1a 2e       	mov	r1, r26
    1352:	aa 1b       	sub	r26, r26
    1354:	bb 1b       	sub	r27, r27
    1356:	fd 01       	movw	r30, r26
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__udivmodsi4_ep>

0000135a <__udivmodsi4_loop>:
    135a:	aa 1f       	adc	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	ee 1f       	adc	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	a2 17       	cp	r26, r18
    1364:	b3 07       	cpc	r27, r19
    1366:	e4 07       	cpc	r30, r20
    1368:	f5 07       	cpc	r31, r21
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__udivmodsi4_ep>
    136c:	a2 1b       	sub	r26, r18
    136e:	b3 0b       	sbc	r27, r19
    1370:	e4 0b       	sbc	r30, r20
    1372:	f5 0b       	sbc	r31, r21

00001374 <__udivmodsi4_ep>:
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	1a 94       	dec	r1
    137e:	69 f7       	brne	.-38     	; 0x135a <__udivmodsi4_loop>
    1380:	60 95       	com	r22
    1382:	70 95       	com	r23
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	bd 01       	movw	r22, r26
    138e:	cf 01       	movw	r24, r30
    1390:	08 95       	ret

00001392 <do_rand>:
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
    13a8:	68 81       	ld	r22, Y
    13aa:	79 81       	ldd	r23, Y+1	; 0x01
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	9b 81       	ldd	r25, Y+3	; 0x03
    13b0:	61 15       	cp	r22, r1
    13b2:	71 05       	cpc	r23, r1
    13b4:	81 05       	cpc	r24, r1
    13b6:	91 05       	cpc	r25, r1
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <do_rand+0x30>
    13ba:	64 e2       	ldi	r22, 0x24	; 36
    13bc:	79 ed       	ldi	r23, 0xD9	; 217
    13be:	8b e5       	ldi	r24, 0x5B	; 91
    13c0:	97 e0       	ldi	r25, 0x07	; 7
    13c2:	2d e1       	ldi	r18, 0x1D	; 29
    13c4:	33 ef       	ldi	r19, 0xF3	; 243
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	96 df       	rcall	.-212    	; 0x12f8 <__divmodsi4>
    13cc:	49 01       	movw	r8, r18
    13ce:	5a 01       	movw	r10, r20
    13d0:	9b 01       	movw	r18, r22
    13d2:	ac 01       	movw	r20, r24
    13d4:	a7 ea       	ldi	r26, 0xA7	; 167
    13d6:	b1 e4       	ldi	r27, 0x41	; 65
    13d8:	20 d3       	rcall	.+1600   	; 0x1a1a <__muluhisi3>
    13da:	6b 01       	movw	r12, r22
    13dc:	7c 01       	movw	r14, r24
    13de:	ac ee       	ldi	r26, 0xEC	; 236
    13e0:	b4 ef       	ldi	r27, 0xF4	; 244
    13e2:	a5 01       	movw	r20, r10
    13e4:	94 01       	movw	r18, r8
    13e6:	25 d3       	rcall	.+1610   	; 0x1a32 <__mulohisi3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8c 0d       	add	r24, r12
    13ee:	9d 1d       	adc	r25, r13
    13f0:	ae 1d       	adc	r26, r14
    13f2:	bf 1d       	adc	r27, r15
    13f4:	b7 ff       	sbrs	r27, 7
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <do_rand+0x6c>
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	a1 09       	sbc	r26, r1
    13fc:	b0 48       	sbci	r27, 0x80	; 128
    13fe:	88 83       	st	Y, r24
    1400:	99 83       	std	Y+1, r25	; 0x01
    1402:	aa 83       	std	Y+2, r26	; 0x02
    1404:	bb 83       	std	Y+3, r27	; 0x03
    1406:	9f 77       	andi	r25, 0x7F	; 127
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	df 90       	pop	r13
    1412:	cf 90       	pop	r12
    1414:	bf 90       	pop	r11
    1416:	af 90       	pop	r10
    1418:	9f 90       	pop	r9
    141a:	8f 90       	pop	r8
    141c:	08 95       	ret

0000141e <rand_r>:
    141e:	b9 cf       	rjmp	.-142    	; 0x1392 <do_rand>

00001420 <rand>:
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	b6 cf       	rjmp	.-148    	; 0x1392 <do_rand>

00001426 <srand>:
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    142e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1432:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1436:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    143a:	08 95       	ret

0000143c <strcat>:
    143c:	fb 01       	movw	r30, r22
    143e:	dc 01       	movw	r26, r24
    1440:	0d 90       	ld	r0, X+
    1442:	00 20       	and	r0, r0
    1444:	e9 f7       	brne	.-6      	; 0x1440 <strcat+0x4>
    1446:	11 97       	sbiw	r26, 0x01	; 1
    1448:	01 90       	ld	r0, Z+
    144a:	0d 92       	st	X+, r0
    144c:	00 20       	and	r0, r0
    144e:	e1 f7       	brne	.-8      	; 0x1448 <strcat+0xc>
    1450:	08 95       	ret

00001452 <strcmp>:
    1452:	fb 01       	movw	r30, r22
    1454:	dc 01       	movw	r26, r24
    1456:	8d 91       	ld	r24, X+
    1458:	01 90       	ld	r0, Z+
    145a:	80 19       	sub	r24, r0
    145c:	01 10       	cpse	r0, r1
    145e:	d9 f3       	breq	.-10     	; 0x1456 <strcmp+0x4>
    1460:	99 0b       	sbc	r25, r25
    1462:	08 95       	ret

00001464 <sprintf>:
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	2e 97       	sbiw	r28, 0x0e	; 14
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	0d 89       	ldd	r16, Y+21	; 0x15
    147e:	1e 89       	ldd	r17, Y+22	; 0x16
    1480:	86 e0       	ldi	r24, 0x06	; 6
    1482:	8c 83       	std	Y+4, r24	; 0x04
    1484:	1a 83       	std	Y+2, r17	; 0x02
    1486:	09 83       	std	Y+1, r16	; 0x01
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	9f e7       	ldi	r25, 0x7F	; 127
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	ae 01       	movw	r20, r28
    1492:	47 5e       	subi	r20, 0xE7	; 231
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	6f 89       	ldd	r22, Y+23	; 0x17
    1498:	78 8d       	ldd	r23, Y+24	; 0x18
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	10 d0       	rcall	.+32     	; 0x14c0 <vfprintf>
    14a0:	ef 81       	ldd	r30, Y+7	; 0x07
    14a2:	f8 85       	ldd	r31, Y+8	; 0x08
    14a4:	e0 0f       	add	r30, r16
    14a6:	f1 1f       	adc	r31, r17
    14a8:	10 82       	st	Z, r1
    14aa:	2e 96       	adiw	r28, 0x0e	; 14
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	08 95       	ret

000014c0 <vfprintf>:
    14c0:	2f 92       	push	r2
    14c2:	3f 92       	push	r3
    14c4:	4f 92       	push	r4
    14c6:	5f 92       	push	r5
    14c8:	6f 92       	push	r6
    14ca:	7f 92       	push	r7
    14cc:	8f 92       	push	r8
    14ce:	9f 92       	push	r9
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2b 97       	sbiw	r28, 0x0b	; 11
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	6c 01       	movw	r12, r24
    14f6:	7b 01       	movw	r14, r22
    14f8:	8a 01       	movw	r16, r20
    14fa:	fc 01       	movw	r30, r24
    14fc:	17 82       	std	Z+7, r1	; 0x07
    14fe:	16 82       	std	Z+6, r1	; 0x06
    1500:	83 81       	ldd	r24, Z+3	; 0x03
    1502:	81 ff       	sbrs	r24, 1
    1504:	bf c1       	rjmp	.+894    	; 0x1884 <vfprintf+0x3c4>
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	3c 01       	movw	r6, r24
    150c:	f6 01       	movw	r30, r12
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	f7 01       	movw	r30, r14
    1512:	93 fd       	sbrc	r25, 3
    1514:	85 91       	lpm	r24, Z+
    1516:	93 ff       	sbrs	r25, 3
    1518:	81 91       	ld	r24, Z+
    151a:	7f 01       	movw	r14, r30
    151c:	88 23       	and	r24, r24
    151e:	09 f4       	brne	.+2      	; 0x1522 <vfprintf+0x62>
    1520:	ad c1       	rjmp	.+858    	; 0x187c <vfprintf+0x3bc>
    1522:	85 32       	cpi	r24, 0x25	; 37
    1524:	39 f4       	brne	.+14     	; 0x1534 <vfprintf+0x74>
    1526:	93 fd       	sbrc	r25, 3
    1528:	85 91       	lpm	r24, Z+
    152a:	93 ff       	sbrs	r25, 3
    152c:	81 91       	ld	r24, Z+
    152e:	7f 01       	movw	r14, r30
    1530:	85 32       	cpi	r24, 0x25	; 37
    1532:	21 f4       	brne	.+8      	; 0x153c <vfprintf+0x7c>
    1534:	b6 01       	movw	r22, r12
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	d6 d1       	rcall	.+940    	; 0x18e6 <fputc>
    153a:	e8 cf       	rjmp	.-48     	; 0x150c <vfprintf+0x4c>
    153c:	91 2c       	mov	r9, r1
    153e:	21 2c       	mov	r2, r1
    1540:	31 2c       	mov	r3, r1
    1542:	ff e1       	ldi	r31, 0x1F	; 31
    1544:	f3 15       	cp	r31, r3
    1546:	d8 f0       	brcs	.+54     	; 0x157e <vfprintf+0xbe>
    1548:	8b 32       	cpi	r24, 0x2B	; 43
    154a:	79 f0       	breq	.+30     	; 0x156a <vfprintf+0xaa>
    154c:	38 f4       	brcc	.+14     	; 0x155c <vfprintf+0x9c>
    154e:	80 32       	cpi	r24, 0x20	; 32
    1550:	79 f0       	breq	.+30     	; 0x1570 <vfprintf+0xb0>
    1552:	83 32       	cpi	r24, 0x23	; 35
    1554:	a1 f4       	brne	.+40     	; 0x157e <vfprintf+0xbe>
    1556:	23 2d       	mov	r18, r3
    1558:	20 61       	ori	r18, 0x10	; 16
    155a:	1d c0       	rjmp	.+58     	; 0x1596 <vfprintf+0xd6>
    155c:	8d 32       	cpi	r24, 0x2D	; 45
    155e:	61 f0       	breq	.+24     	; 0x1578 <vfprintf+0xb8>
    1560:	80 33       	cpi	r24, 0x30	; 48
    1562:	69 f4       	brne	.+26     	; 0x157e <vfprintf+0xbe>
    1564:	23 2d       	mov	r18, r3
    1566:	21 60       	ori	r18, 0x01	; 1
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <vfprintf+0xd6>
    156a:	83 2d       	mov	r24, r3
    156c:	82 60       	ori	r24, 0x02	; 2
    156e:	38 2e       	mov	r3, r24
    1570:	e3 2d       	mov	r30, r3
    1572:	e4 60       	ori	r30, 0x04	; 4
    1574:	3e 2e       	mov	r3, r30
    1576:	2a c0       	rjmp	.+84     	; 0x15cc <vfprintf+0x10c>
    1578:	f3 2d       	mov	r31, r3
    157a:	f8 60       	ori	r31, 0x08	; 8
    157c:	1d c0       	rjmp	.+58     	; 0x15b8 <vfprintf+0xf8>
    157e:	37 fc       	sbrc	r3, 7
    1580:	2d c0       	rjmp	.+90     	; 0x15dc <vfprintf+0x11c>
    1582:	20 ed       	ldi	r18, 0xD0	; 208
    1584:	28 0f       	add	r18, r24
    1586:	2a 30       	cpi	r18, 0x0A	; 10
    1588:	40 f0       	brcs	.+16     	; 0x159a <vfprintf+0xda>
    158a:	8e 32       	cpi	r24, 0x2E	; 46
    158c:	b9 f4       	brne	.+46     	; 0x15bc <vfprintf+0xfc>
    158e:	36 fc       	sbrc	r3, 6
    1590:	75 c1       	rjmp	.+746    	; 0x187c <vfprintf+0x3bc>
    1592:	23 2d       	mov	r18, r3
    1594:	20 64       	ori	r18, 0x40	; 64
    1596:	32 2e       	mov	r3, r18
    1598:	19 c0       	rjmp	.+50     	; 0x15cc <vfprintf+0x10c>
    159a:	36 fe       	sbrs	r3, 6
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <vfprintf+0xea>
    159e:	8a e0       	ldi	r24, 0x0A	; 10
    15a0:	98 9e       	mul	r9, r24
    15a2:	20 0d       	add	r18, r0
    15a4:	11 24       	eor	r1, r1
    15a6:	92 2e       	mov	r9, r18
    15a8:	11 c0       	rjmp	.+34     	; 0x15cc <vfprintf+0x10c>
    15aa:	ea e0       	ldi	r30, 0x0A	; 10
    15ac:	2e 9e       	mul	r2, r30
    15ae:	20 0d       	add	r18, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	22 2e       	mov	r2, r18
    15b4:	f3 2d       	mov	r31, r3
    15b6:	f0 62       	ori	r31, 0x20	; 32
    15b8:	3f 2e       	mov	r3, r31
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <vfprintf+0x10c>
    15bc:	8c 36       	cpi	r24, 0x6C	; 108
    15be:	21 f4       	brne	.+8      	; 0x15c8 <vfprintf+0x108>
    15c0:	83 2d       	mov	r24, r3
    15c2:	80 68       	ori	r24, 0x80	; 128
    15c4:	38 2e       	mov	r3, r24
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x10c>
    15c8:	88 36       	cpi	r24, 0x68	; 104
    15ca:	41 f4       	brne	.+16     	; 0x15dc <vfprintf+0x11c>
    15cc:	f7 01       	movw	r30, r14
    15ce:	93 fd       	sbrc	r25, 3
    15d0:	85 91       	lpm	r24, Z+
    15d2:	93 ff       	sbrs	r25, 3
    15d4:	81 91       	ld	r24, Z+
    15d6:	7f 01       	movw	r14, r30
    15d8:	81 11       	cpse	r24, r1
    15da:	b3 cf       	rjmp	.-154    	; 0x1542 <vfprintf+0x82>
    15dc:	98 2f       	mov	r25, r24
    15de:	9f 7d       	andi	r25, 0xDF	; 223
    15e0:	95 54       	subi	r25, 0x45	; 69
    15e2:	93 30       	cpi	r25, 0x03	; 3
    15e4:	28 f4       	brcc	.+10     	; 0x15f0 <vfprintf+0x130>
    15e6:	0c 5f       	subi	r16, 0xFC	; 252
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	9f e3       	ldi	r25, 0x3F	; 63
    15ec:	99 83       	std	Y+1, r25	; 0x01
    15ee:	0d c0       	rjmp	.+26     	; 0x160a <vfprintf+0x14a>
    15f0:	83 36       	cpi	r24, 0x63	; 99
    15f2:	31 f0       	breq	.+12     	; 0x1600 <vfprintf+0x140>
    15f4:	83 37       	cpi	r24, 0x73	; 115
    15f6:	71 f0       	breq	.+28     	; 0x1614 <vfprintf+0x154>
    15f8:	83 35       	cpi	r24, 0x53	; 83
    15fa:	09 f0       	breq	.+2      	; 0x15fe <vfprintf+0x13e>
    15fc:	55 c0       	rjmp	.+170    	; 0x16a8 <vfprintf+0x1e8>
    15fe:	20 c0       	rjmp	.+64     	; 0x1640 <vfprintf+0x180>
    1600:	f8 01       	movw	r30, r16
    1602:	80 81       	ld	r24, Z
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	0e 5f       	subi	r16, 0xFE	; 254
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	88 24       	eor	r8, r8
    160c:	83 94       	inc	r8
    160e:	91 2c       	mov	r9, r1
    1610:	53 01       	movw	r10, r6
    1612:	12 c0       	rjmp	.+36     	; 0x1638 <vfprintf+0x178>
    1614:	28 01       	movw	r4, r16
    1616:	f2 e0       	ldi	r31, 0x02	; 2
    1618:	4f 0e       	add	r4, r31
    161a:	51 1c       	adc	r5, r1
    161c:	f8 01       	movw	r30, r16
    161e:	a0 80       	ld	r10, Z
    1620:	b1 80       	ldd	r11, Z+1	; 0x01
    1622:	36 fe       	sbrs	r3, 6
    1624:	03 c0       	rjmp	.+6      	; 0x162c <vfprintf+0x16c>
    1626:	69 2d       	mov	r22, r9
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0x170>
    162c:	6f ef       	ldi	r22, 0xFF	; 255
    162e:	7f ef       	ldi	r23, 0xFF	; 255
    1630:	c5 01       	movw	r24, r10
    1632:	4e d1       	rcall	.+668    	; 0x18d0 <strnlen>
    1634:	4c 01       	movw	r8, r24
    1636:	82 01       	movw	r16, r4
    1638:	f3 2d       	mov	r31, r3
    163a:	ff 77       	andi	r31, 0x7F	; 127
    163c:	3f 2e       	mov	r3, r31
    163e:	15 c0       	rjmp	.+42     	; 0x166a <vfprintf+0x1aa>
    1640:	28 01       	movw	r4, r16
    1642:	22 e0       	ldi	r18, 0x02	; 2
    1644:	42 0e       	add	r4, r18
    1646:	51 1c       	adc	r5, r1
    1648:	f8 01       	movw	r30, r16
    164a:	a0 80       	ld	r10, Z
    164c:	b1 80       	ldd	r11, Z+1	; 0x01
    164e:	36 fe       	sbrs	r3, 6
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <vfprintf+0x198>
    1652:	69 2d       	mov	r22, r9
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	02 c0       	rjmp	.+4      	; 0x165c <vfprintf+0x19c>
    1658:	6f ef       	ldi	r22, 0xFF	; 255
    165a:	7f ef       	ldi	r23, 0xFF	; 255
    165c:	c5 01       	movw	r24, r10
    165e:	2d d1       	rcall	.+602    	; 0x18ba <strnlen_P>
    1660:	4c 01       	movw	r8, r24
    1662:	f3 2d       	mov	r31, r3
    1664:	f0 68       	ori	r31, 0x80	; 128
    1666:	3f 2e       	mov	r3, r31
    1668:	82 01       	movw	r16, r4
    166a:	33 fc       	sbrc	r3, 3
    166c:	19 c0       	rjmp	.+50     	; 0x16a0 <vfprintf+0x1e0>
    166e:	82 2d       	mov	r24, r2
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	88 16       	cp	r8, r24
    1674:	99 06       	cpc	r9, r25
    1676:	a0 f4       	brcc	.+40     	; 0x16a0 <vfprintf+0x1e0>
    1678:	b6 01       	movw	r22, r12
    167a:	80 e2       	ldi	r24, 0x20	; 32
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	33 d1       	rcall	.+614    	; 0x18e6 <fputc>
    1680:	2a 94       	dec	r2
    1682:	f5 cf       	rjmp	.-22     	; 0x166e <vfprintf+0x1ae>
    1684:	f5 01       	movw	r30, r10
    1686:	37 fc       	sbrc	r3, 7
    1688:	85 91       	lpm	r24, Z+
    168a:	37 fe       	sbrs	r3, 7
    168c:	81 91       	ld	r24, Z+
    168e:	5f 01       	movw	r10, r30
    1690:	b6 01       	movw	r22, r12
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	28 d1       	rcall	.+592    	; 0x18e6 <fputc>
    1696:	21 10       	cpse	r2, r1
    1698:	2a 94       	dec	r2
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	82 1a       	sub	r8, r18
    169e:	91 08       	sbc	r9, r1
    16a0:	81 14       	cp	r8, r1
    16a2:	91 04       	cpc	r9, r1
    16a4:	79 f7       	brne	.-34     	; 0x1684 <vfprintf+0x1c4>
    16a6:	e1 c0       	rjmp	.+450    	; 0x186a <vfprintf+0x3aa>
    16a8:	84 36       	cpi	r24, 0x64	; 100
    16aa:	11 f0       	breq	.+4      	; 0x16b0 <vfprintf+0x1f0>
    16ac:	89 36       	cpi	r24, 0x69	; 105
    16ae:	39 f5       	brne	.+78     	; 0x16fe <vfprintf+0x23e>
    16b0:	f8 01       	movw	r30, r16
    16b2:	37 fe       	sbrs	r3, 7
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <vfprintf+0x204>
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	0c 5f       	subi	r16, 0xFC	; 252
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <vfprintf+0x214>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	07 2e       	mov	r0, r23
    16ca:	00 0c       	add	r0, r0
    16cc:	88 0b       	sbc	r24, r24
    16ce:	99 0b       	sbc	r25, r25
    16d0:	0e 5f       	subi	r16, 0xFE	; 254
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	f3 2d       	mov	r31, r3
    16d6:	ff 76       	andi	r31, 0x6F	; 111
    16d8:	3f 2e       	mov	r3, r31
    16da:	97 ff       	sbrs	r25, 7
    16dc:	09 c0       	rjmp	.+18     	; 0x16f0 <vfprintf+0x230>
    16de:	90 95       	com	r25
    16e0:	80 95       	com	r24
    16e2:	70 95       	com	r23
    16e4:	61 95       	neg	r22
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	f0 68       	ori	r31, 0x80	; 128
    16ee:	3f 2e       	mov	r3, r31
    16f0:	2a e0       	ldi	r18, 0x0A	; 10
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	a3 01       	movw	r20, r6
    16f6:	33 d1       	rcall	.+614    	; 0x195e <__ultoa_invert>
    16f8:	88 2e       	mov	r8, r24
    16fa:	86 18       	sub	r8, r6
    16fc:	44 c0       	rjmp	.+136    	; 0x1786 <vfprintf+0x2c6>
    16fe:	85 37       	cpi	r24, 0x75	; 117
    1700:	31 f4       	brne	.+12     	; 0x170e <vfprintf+0x24e>
    1702:	23 2d       	mov	r18, r3
    1704:	2f 7e       	andi	r18, 0xEF	; 239
    1706:	b2 2e       	mov	r11, r18
    1708:	2a e0       	ldi	r18, 0x0A	; 10
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	25 c0       	rjmp	.+74     	; 0x1758 <vfprintf+0x298>
    170e:	93 2d       	mov	r25, r3
    1710:	99 7f       	andi	r25, 0xF9	; 249
    1712:	b9 2e       	mov	r11, r25
    1714:	8f 36       	cpi	r24, 0x6F	; 111
    1716:	c1 f0       	breq	.+48     	; 0x1748 <vfprintf+0x288>
    1718:	18 f4       	brcc	.+6      	; 0x1720 <vfprintf+0x260>
    171a:	88 35       	cpi	r24, 0x58	; 88
    171c:	79 f0       	breq	.+30     	; 0x173c <vfprintf+0x27c>
    171e:	ae c0       	rjmp	.+348    	; 0x187c <vfprintf+0x3bc>
    1720:	80 37       	cpi	r24, 0x70	; 112
    1722:	19 f0       	breq	.+6      	; 0x172a <vfprintf+0x26a>
    1724:	88 37       	cpi	r24, 0x78	; 120
    1726:	21 f0       	breq	.+8      	; 0x1730 <vfprintf+0x270>
    1728:	a9 c0       	rjmp	.+338    	; 0x187c <vfprintf+0x3bc>
    172a:	e9 2f       	mov	r30, r25
    172c:	e0 61       	ori	r30, 0x10	; 16
    172e:	be 2e       	mov	r11, r30
    1730:	b4 fe       	sbrs	r11, 4
    1732:	0d c0       	rjmp	.+26     	; 0x174e <vfprintf+0x28e>
    1734:	fb 2d       	mov	r31, r11
    1736:	f4 60       	ori	r31, 0x04	; 4
    1738:	bf 2e       	mov	r11, r31
    173a:	09 c0       	rjmp	.+18     	; 0x174e <vfprintf+0x28e>
    173c:	34 fe       	sbrs	r3, 4
    173e:	0a c0       	rjmp	.+20     	; 0x1754 <vfprintf+0x294>
    1740:	29 2f       	mov	r18, r25
    1742:	26 60       	ori	r18, 0x06	; 6
    1744:	b2 2e       	mov	r11, r18
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <vfprintf+0x294>
    1748:	28 e0       	ldi	r18, 0x08	; 8
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <vfprintf+0x298>
    174e:	20 e1       	ldi	r18, 0x10	; 16
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x298>
    1754:	20 e1       	ldi	r18, 0x10	; 16
    1756:	32 e0       	ldi	r19, 0x02	; 2
    1758:	f8 01       	movw	r30, r16
    175a:	b7 fe       	sbrs	r11, 7
    175c:	07 c0       	rjmp	.+14     	; 0x176c <vfprintf+0x2ac>
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	0c 5f       	subi	r16, 0xFC	; 252
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x2b8>
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 5f       	subi	r16, 0xFE	; 254
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	a3 01       	movw	r20, r6
    177a:	f1 d0       	rcall	.+482    	; 0x195e <__ultoa_invert>
    177c:	88 2e       	mov	r8, r24
    177e:	86 18       	sub	r8, r6
    1780:	fb 2d       	mov	r31, r11
    1782:	ff 77       	andi	r31, 0x7F	; 127
    1784:	3f 2e       	mov	r3, r31
    1786:	36 fe       	sbrs	r3, 6
    1788:	0d c0       	rjmp	.+26     	; 0x17a4 <vfprintf+0x2e4>
    178a:	23 2d       	mov	r18, r3
    178c:	2e 7f       	andi	r18, 0xFE	; 254
    178e:	a2 2e       	mov	r10, r18
    1790:	89 14       	cp	r8, r9
    1792:	58 f4       	brcc	.+22     	; 0x17aa <vfprintf+0x2ea>
    1794:	34 fe       	sbrs	r3, 4
    1796:	0b c0       	rjmp	.+22     	; 0x17ae <vfprintf+0x2ee>
    1798:	32 fc       	sbrc	r3, 2
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <vfprintf+0x2ee>
    179c:	83 2d       	mov	r24, r3
    179e:	8e 7e       	andi	r24, 0xEE	; 238
    17a0:	a8 2e       	mov	r10, r24
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <vfprintf+0x2ee>
    17a4:	b8 2c       	mov	r11, r8
    17a6:	a3 2c       	mov	r10, r3
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <vfprintf+0x2f0>
    17aa:	b8 2c       	mov	r11, r8
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <vfprintf+0x2f0>
    17ae:	b9 2c       	mov	r11, r9
    17b0:	a4 fe       	sbrs	r10, 4
    17b2:	0f c0       	rjmp	.+30     	; 0x17d2 <vfprintf+0x312>
    17b4:	fe 01       	movw	r30, r28
    17b6:	e8 0d       	add	r30, r8
    17b8:	f1 1d       	adc	r31, r1
    17ba:	80 81       	ld	r24, Z
    17bc:	80 33       	cpi	r24, 0x30	; 48
    17be:	21 f4       	brne	.+8      	; 0x17c8 <vfprintf+0x308>
    17c0:	9a 2d       	mov	r25, r10
    17c2:	99 7e       	andi	r25, 0xE9	; 233
    17c4:	a9 2e       	mov	r10, r25
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <vfprintf+0x31a>
    17c8:	a2 fe       	sbrs	r10, 2
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <vfprintf+0x318>
    17cc:	b3 94       	inc	r11
    17ce:	b3 94       	inc	r11
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <vfprintf+0x31a>
    17d2:	8a 2d       	mov	r24, r10
    17d4:	86 78       	andi	r24, 0x86	; 134
    17d6:	09 f0       	breq	.+2      	; 0x17da <vfprintf+0x31a>
    17d8:	b3 94       	inc	r11
    17da:	a3 fc       	sbrc	r10, 3
    17dc:	10 c0       	rjmp	.+32     	; 0x17fe <vfprintf+0x33e>
    17de:	a0 fe       	sbrs	r10, 0
    17e0:	06 c0       	rjmp	.+12     	; 0x17ee <vfprintf+0x32e>
    17e2:	b2 14       	cp	r11, r2
    17e4:	80 f4       	brcc	.+32     	; 0x1806 <vfprintf+0x346>
    17e6:	28 0c       	add	r2, r8
    17e8:	92 2c       	mov	r9, r2
    17ea:	9b 18       	sub	r9, r11
    17ec:	0d c0       	rjmp	.+26     	; 0x1808 <vfprintf+0x348>
    17ee:	b2 14       	cp	r11, r2
    17f0:	58 f4       	brcc	.+22     	; 0x1808 <vfprintf+0x348>
    17f2:	b6 01       	movw	r22, r12
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	76 d0       	rcall	.+236    	; 0x18e6 <fputc>
    17fa:	b3 94       	inc	r11
    17fc:	f8 cf       	rjmp	.-16     	; 0x17ee <vfprintf+0x32e>
    17fe:	b2 14       	cp	r11, r2
    1800:	18 f4       	brcc	.+6      	; 0x1808 <vfprintf+0x348>
    1802:	2b 18       	sub	r2, r11
    1804:	02 c0       	rjmp	.+4      	; 0x180a <vfprintf+0x34a>
    1806:	98 2c       	mov	r9, r8
    1808:	21 2c       	mov	r2, r1
    180a:	a4 fe       	sbrs	r10, 4
    180c:	0f c0       	rjmp	.+30     	; 0x182c <vfprintf+0x36c>
    180e:	b6 01       	movw	r22, r12
    1810:	80 e3       	ldi	r24, 0x30	; 48
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	68 d0       	rcall	.+208    	; 0x18e6 <fputc>
    1816:	a2 fe       	sbrs	r10, 2
    1818:	16 c0       	rjmp	.+44     	; 0x1846 <vfprintf+0x386>
    181a:	a1 fc       	sbrc	r10, 1
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <vfprintf+0x364>
    181e:	88 e7       	ldi	r24, 0x78	; 120
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x368>
    1824:	88 e5       	ldi	r24, 0x58	; 88
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	b6 01       	movw	r22, r12
    182a:	0c c0       	rjmp	.+24     	; 0x1844 <vfprintf+0x384>
    182c:	8a 2d       	mov	r24, r10
    182e:	86 78       	andi	r24, 0x86	; 134
    1830:	51 f0       	breq	.+20     	; 0x1846 <vfprintf+0x386>
    1832:	a1 fe       	sbrs	r10, 1
    1834:	02 c0       	rjmp	.+4      	; 0x183a <vfprintf+0x37a>
    1836:	8b e2       	ldi	r24, 0x2B	; 43
    1838:	01 c0       	rjmp	.+2      	; 0x183c <vfprintf+0x37c>
    183a:	80 e2       	ldi	r24, 0x20	; 32
    183c:	a7 fc       	sbrc	r10, 7
    183e:	8d e2       	ldi	r24, 0x2D	; 45
    1840:	b6 01       	movw	r22, r12
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	50 d0       	rcall	.+160    	; 0x18e6 <fputc>
    1846:	89 14       	cp	r8, r9
    1848:	30 f4       	brcc	.+12     	; 0x1856 <vfprintf+0x396>
    184a:	b6 01       	movw	r22, r12
    184c:	80 e3       	ldi	r24, 0x30	; 48
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	4a d0       	rcall	.+148    	; 0x18e6 <fputc>
    1852:	9a 94       	dec	r9
    1854:	f8 cf       	rjmp	.-16     	; 0x1846 <vfprintf+0x386>
    1856:	8a 94       	dec	r8
    1858:	f3 01       	movw	r30, r6
    185a:	e8 0d       	add	r30, r8
    185c:	f1 1d       	adc	r31, r1
    185e:	80 81       	ld	r24, Z
    1860:	b6 01       	movw	r22, r12
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	40 d0       	rcall	.+128    	; 0x18e6 <fputc>
    1866:	81 10       	cpse	r8, r1
    1868:	f6 cf       	rjmp	.-20     	; 0x1856 <vfprintf+0x396>
    186a:	22 20       	and	r2, r2
    186c:	09 f4       	brne	.+2      	; 0x1870 <vfprintf+0x3b0>
    186e:	4e ce       	rjmp	.-868    	; 0x150c <vfprintf+0x4c>
    1870:	b6 01       	movw	r22, r12
    1872:	80 e2       	ldi	r24, 0x20	; 32
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	37 d0       	rcall	.+110    	; 0x18e6 <fputc>
    1878:	2a 94       	dec	r2
    187a:	f7 cf       	rjmp	.-18     	; 0x186a <vfprintf+0x3aa>
    187c:	f6 01       	movw	r30, r12
    187e:	86 81       	ldd	r24, Z+6	; 0x06
    1880:	97 81       	ldd	r25, Z+7	; 0x07
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x3c8>
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	9f ef       	ldi	r25, 0xFF	; 255
    1888:	2b 96       	adiw	r28, 0x0b	; 11
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	bf 90       	pop	r11
    18a6:	af 90       	pop	r10
    18a8:	9f 90       	pop	r9
    18aa:	8f 90       	pop	r8
    18ac:	7f 90       	pop	r7
    18ae:	6f 90       	pop	r6
    18b0:	5f 90       	pop	r5
    18b2:	4f 90       	pop	r4
    18b4:	3f 90       	pop	r3
    18b6:	2f 90       	pop	r2
    18b8:	08 95       	ret

000018ba <strnlen_P>:
    18ba:	fc 01       	movw	r30, r24
    18bc:	05 90       	lpm	r0, Z+
    18be:	61 50       	subi	r22, 0x01	; 1
    18c0:	70 40       	sbci	r23, 0x00	; 0
    18c2:	01 10       	cpse	r0, r1
    18c4:	d8 f7       	brcc	.-10     	; 0x18bc <strnlen_P+0x2>
    18c6:	80 95       	com	r24
    18c8:	90 95       	com	r25
    18ca:	8e 0f       	add	r24, r30
    18cc:	9f 1f       	adc	r25, r31
    18ce:	08 95       	ret

000018d0 <strnlen>:
    18d0:	fc 01       	movw	r30, r24
    18d2:	61 50       	subi	r22, 0x01	; 1
    18d4:	70 40       	sbci	r23, 0x00	; 0
    18d6:	01 90       	ld	r0, Z+
    18d8:	01 10       	cpse	r0, r1
    18da:	d8 f7       	brcc	.-10     	; 0x18d2 <strnlen+0x2>
    18dc:	80 95       	com	r24
    18de:	90 95       	com	r25
    18e0:	8e 0f       	add	r24, r30
    18e2:	9f 1f       	adc	r25, r31
    18e4:	08 95       	ret

000018e6 <fputc>:
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	fb 01       	movw	r30, r22
    18f0:	23 81       	ldd	r18, Z+3	; 0x03
    18f2:	21 fd       	sbrc	r18, 1
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <fputc+0x16>
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	9f ef       	ldi	r25, 0xFF	; 255
    18fa:	2c c0       	rjmp	.+88     	; 0x1954 <fputc+0x6e>
    18fc:	22 ff       	sbrs	r18, 2
    18fe:	16 c0       	rjmp	.+44     	; 0x192c <fputc+0x46>
    1900:	46 81       	ldd	r20, Z+6	; 0x06
    1902:	57 81       	ldd	r21, Z+7	; 0x07
    1904:	24 81       	ldd	r18, Z+4	; 0x04
    1906:	35 81       	ldd	r19, Z+5	; 0x05
    1908:	42 17       	cp	r20, r18
    190a:	53 07       	cpc	r21, r19
    190c:	44 f4       	brge	.+16     	; 0x191e <fputc+0x38>
    190e:	a0 81       	ld	r26, Z
    1910:	b1 81       	ldd	r27, Z+1	; 0x01
    1912:	9d 01       	movw	r18, r26
    1914:	2f 5f       	subi	r18, 0xFF	; 255
    1916:	3f 4f       	sbci	r19, 0xFF	; 255
    1918:	31 83       	std	Z+1, r19	; 0x01
    191a:	20 83       	st	Z, r18
    191c:	8c 93       	st	X, r24
    191e:	26 81       	ldd	r18, Z+6	; 0x06
    1920:	37 81       	ldd	r19, Z+7	; 0x07
    1922:	2f 5f       	subi	r18, 0xFF	; 255
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	37 83       	std	Z+7, r19	; 0x07
    1928:	26 83       	std	Z+6, r18	; 0x06
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <fputc+0x6e>
    192c:	8b 01       	movw	r16, r22
    192e:	ec 01       	movw	r28, r24
    1930:	fb 01       	movw	r30, r22
    1932:	00 84       	ldd	r0, Z+8	; 0x08
    1934:	f1 85       	ldd	r31, Z+9	; 0x09
    1936:	e0 2d       	mov	r30, r0
    1938:	09 95       	icall
    193a:	89 2b       	or	r24, r25
    193c:	e1 f6       	brne	.-72     	; 0x18f6 <fputc+0x10>
    193e:	d8 01       	movw	r26, r16
    1940:	16 96       	adiw	r26, 0x06	; 6
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	17 97       	sbiw	r26, 0x07	; 7
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	17 96       	adiw	r26, 0x07	; 7
    194c:	9c 93       	st	X, r25
    194e:	8e 93       	st	-X, r24
    1950:	16 97       	sbiw	r26, 0x06	; 6
    1952:	ce 01       	movw	r24, r28
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <__ultoa_invert>:
    195e:	fa 01       	movw	r30, r20
    1960:	aa 27       	eor	r26, r26
    1962:	28 30       	cpi	r18, 0x08	; 8
    1964:	51 f1       	breq	.+84     	; 0x19ba <__ultoa_invert+0x5c>
    1966:	20 31       	cpi	r18, 0x10	; 16
    1968:	81 f1       	breq	.+96     	; 0x19ca <__ultoa_invert+0x6c>
    196a:	e8 94       	clt
    196c:	6f 93       	push	r22
    196e:	6e 7f       	andi	r22, 0xFE	; 254
    1970:	6e 5f       	subi	r22, 0xFE	; 254
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	8f 4f       	sbci	r24, 0xFF	; 255
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	af 4f       	sbci	r26, 0xFF	; 255
    197a:	b1 e0       	ldi	r27, 0x01	; 1
    197c:	3e d0       	rcall	.+124    	; 0x19fa <__ultoa_invert+0x9c>
    197e:	b4 e0       	ldi	r27, 0x04	; 4
    1980:	3c d0       	rcall	.+120    	; 0x19fa <__ultoa_invert+0x9c>
    1982:	67 0f       	add	r22, r23
    1984:	78 1f       	adc	r23, r24
    1986:	89 1f       	adc	r24, r25
    1988:	9a 1f       	adc	r25, r26
    198a:	a1 1d       	adc	r26, r1
    198c:	68 0f       	add	r22, r24
    198e:	79 1f       	adc	r23, r25
    1990:	8a 1f       	adc	r24, r26
    1992:	91 1d       	adc	r25, r1
    1994:	a1 1d       	adc	r26, r1
    1996:	6a 0f       	add	r22, r26
    1998:	71 1d       	adc	r23, r1
    199a:	81 1d       	adc	r24, r1
    199c:	91 1d       	adc	r25, r1
    199e:	a1 1d       	adc	r26, r1
    19a0:	20 d0       	rcall	.+64     	; 0x19e2 <__ultoa_invert+0x84>
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__ultoa_invert+0x48>
    19a4:	68 94       	set
    19a6:	3f 91       	pop	r19
    19a8:	2a e0       	ldi	r18, 0x0A	; 10
    19aa:	26 9f       	mul	r18, r22
    19ac:	11 24       	eor	r1, r1
    19ae:	30 19       	sub	r19, r0
    19b0:	30 5d       	subi	r19, 0xD0	; 208
    19b2:	31 93       	st	Z+, r19
    19b4:	de f6       	brtc	.-74     	; 0x196c <__ultoa_invert+0xe>
    19b6:	cf 01       	movw	r24, r30
    19b8:	08 95       	ret
    19ba:	46 2f       	mov	r20, r22
    19bc:	47 70       	andi	r20, 0x07	; 7
    19be:	40 5d       	subi	r20, 0xD0	; 208
    19c0:	41 93       	st	Z+, r20
    19c2:	b3 e0       	ldi	r27, 0x03	; 3
    19c4:	0f d0       	rcall	.+30     	; 0x19e4 <__ultoa_invert+0x86>
    19c6:	c9 f7       	brne	.-14     	; 0x19ba <__ultoa_invert+0x5c>
    19c8:	f6 cf       	rjmp	.-20     	; 0x19b6 <__ultoa_invert+0x58>
    19ca:	46 2f       	mov	r20, r22
    19cc:	4f 70       	andi	r20, 0x0F	; 15
    19ce:	40 5d       	subi	r20, 0xD0	; 208
    19d0:	4a 33       	cpi	r20, 0x3A	; 58
    19d2:	18 f0       	brcs	.+6      	; 0x19da <__ultoa_invert+0x7c>
    19d4:	49 5d       	subi	r20, 0xD9	; 217
    19d6:	31 fd       	sbrc	r19, 1
    19d8:	40 52       	subi	r20, 0x20	; 32
    19da:	41 93       	st	Z+, r20
    19dc:	02 d0       	rcall	.+4      	; 0x19e2 <__ultoa_invert+0x84>
    19de:	a9 f7       	brne	.-22     	; 0x19ca <__ultoa_invert+0x6c>
    19e0:	ea cf       	rjmp	.-44     	; 0x19b6 <__ultoa_invert+0x58>
    19e2:	b4 e0       	ldi	r27, 0x04	; 4
    19e4:	a6 95       	lsr	r26
    19e6:	97 95       	ror	r25
    19e8:	87 95       	ror	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	ba 95       	dec	r27
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__ultoa_invert+0x86>
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	61 05       	cpc	r22, r1
    19f6:	71 05       	cpc	r23, r1
    19f8:	08 95       	ret
    19fa:	9b 01       	movw	r18, r22
    19fc:	ac 01       	movw	r20, r24
    19fe:	0a 2e       	mov	r0, r26
    1a00:	06 94       	lsr	r0
    1a02:	57 95       	ror	r21
    1a04:	47 95       	ror	r20
    1a06:	37 95       	ror	r19
    1a08:	27 95       	ror	r18
    1a0a:	ba 95       	dec	r27
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__ultoa_invert+0xa2>
    1a0e:	62 0f       	add	r22, r18
    1a10:	73 1f       	adc	r23, r19
    1a12:	84 1f       	adc	r24, r20
    1a14:	95 1f       	adc	r25, r21
    1a16:	a0 1d       	adc	r26, r0
    1a18:	08 95       	ret

00001a1a <__muluhisi3>:
    1a1a:	8a dc       	rcall	.-1772   	; 0x1330 <__umulhisi3>
    1a1c:	a5 9f       	mul	r26, r21
    1a1e:	90 0d       	add	r25, r0
    1a20:	b4 9f       	mul	r27, r20
    1a22:	90 0d       	add	r25, r0
    1a24:	a4 9f       	mul	r26, r20
    1a26:	80 0d       	add	r24, r0
    1a28:	91 1d       	adc	r25, r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	08 95       	ret

00001a2e <__mulshisi3>:
    1a2e:	b7 ff       	sbrs	r27, 7
    1a30:	f4 cf       	rjmp	.-24     	; 0x1a1a <__muluhisi3>

00001a32 <__mulohisi3>:
    1a32:	f3 df       	rcall	.-26     	; 0x1a1a <__muluhisi3>
    1a34:	82 1b       	sub	r24, r18
    1a36:	93 0b       	sbc	r25, r19
    1a38:	08 95       	ret

00001a3a <_exit>:
    1a3a:	f8 94       	cli

00001a3c <__stop_program>:
    1a3c:	ff cf       	rjmp	.-2      	; 0x1a3c <__stop_program>
